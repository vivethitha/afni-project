///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The InsuredDetails_Company_Information recording.
    /// </summary>
    [TestModule("374c9e88-7249-446b-b73a-40d27a5542f6", ModuleType.Recording, 1)]
    public partial class InsuredDetails_Company_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static InsuredDetails_Company_Information instance = new InsuredDetails_Company_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public InsuredDetails_Company_Information()
        {
            ID_CI_CompName = "";
            ID_CI_PolicyNumber = "";
            ID_CI_ClaimNumber = "";
            ID_CI_ContactNumber = "";
            ID_CI_State = "";
            ID_CI_Address1 = "";
            ID_CI_Address2 = "";
            ID_CI_City = "";
            ID_CI_Zip = "";
            ID_CI_UseType = "";
            ID_CI_PhoneType = "";
            ID_CI_Source = "";
            ID_CI_PhoneNumber = "";
            ID_CI_EmailUseType = "";
            ID_CI_Emailsource = "";
            ID_CI_EmailID = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static InsuredDetails_Company_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _ID_CI_CompName;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_CompName.
        /// </summary>
        [TestVariable("9ac8aec5-2639-4846-9d07-4266bb3ba407")]
        public string ID_CI_CompName
        {
            get { return _ID_CI_CompName; }
            set { _ID_CI_CompName = value; }
        }

        string _ID_CI_PolicyNumber;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_PolicyNumber.
        /// </summary>
        [TestVariable("b3937926-3473-4437-88aa-b77425d68b3c")]
        public string ID_CI_PolicyNumber
        {
            get { return _ID_CI_PolicyNumber; }
            set { _ID_CI_PolicyNumber = value; }
        }

        string _ID_CI_ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_ClaimNumber.
        /// </summary>
        [TestVariable("5a1fc87e-485e-4bab-a9cc-8142c6a6de76")]
        public string ID_CI_ClaimNumber
        {
            get { return _ID_CI_ClaimNumber; }
            set { _ID_CI_ClaimNumber = value; }
        }

        string _ID_CI_ContactNumber;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_ContactNumber.
        /// </summary>
        [TestVariable("b4bffa19-5a21-421e-8df1-a155a401ca49")]
        public string ID_CI_ContactNumber
        {
            get { return _ID_CI_ContactNumber; }
            set { _ID_CI_ContactNumber = value; }
        }

        string _ID_CI_State;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_State.
        /// </summary>
        [TestVariable("fafc8b4a-de8c-4ebc-a2d7-ef0848366c4f")]
        public string ID_CI_State
        {
            get { return _ID_CI_State; }
            set { _ID_CI_State = value; }
        }

        string _ID_CI_Address1;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_Address1.
        /// </summary>
        [TestVariable("37e849c1-d87c-4892-888c-ef5366965295")]
        public string ID_CI_Address1
        {
            get { return _ID_CI_Address1; }
            set { _ID_CI_Address1 = value; }
        }

        string _ID_CI_Address2;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_Address2.
        /// </summary>
        [TestVariable("3d5a8f46-2390-42ed-b3e4-0ad5ec9b9ceb")]
        public string ID_CI_Address2
        {
            get { return _ID_CI_Address2; }
            set { _ID_CI_Address2 = value; }
        }

        string _ID_CI_City;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_City.
        /// </summary>
        [TestVariable("903fb10b-6b86-428b-b414-656284353b96")]
        public string ID_CI_City
        {
            get { return _ID_CI_City; }
            set { _ID_CI_City = value; }
        }

        string _ID_CI_Zip;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_Zip.
        /// </summary>
        [TestVariable("f3fa8ecf-00ee-4efe-8b06-c0abb4aed3c0")]
        public string ID_CI_Zip
        {
            get { return _ID_CI_Zip; }
            set { _ID_CI_Zip = value; }
        }

        string _ID_CI_UseType;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_UseType.
        /// </summary>
        [TestVariable("5328a009-2878-4765-8931-80da47180da0")]
        public string ID_CI_UseType
        {
            get { return _ID_CI_UseType; }
            set { _ID_CI_UseType = value; }
        }

        string _ID_CI_PhoneType;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_PhoneType.
        /// </summary>
        [TestVariable("8ce2a479-282d-4108-89fa-05fb90519cd7")]
        public string ID_CI_PhoneType
        {
            get { return _ID_CI_PhoneType; }
            set { _ID_CI_PhoneType = value; }
        }

        string _ID_CI_Source;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_Source.
        /// </summary>
        [TestVariable("e875087f-9e4d-4928-873d-7c6ba91e7ec3")]
        public string ID_CI_Source
        {
            get { return _ID_CI_Source; }
            set { _ID_CI_Source = value; }
        }

        string _ID_CI_PhoneNumber;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_PhoneNumber.
        /// </summary>
        [TestVariable("602b0674-f9ac-479a-936b-df93d112661b")]
        public string ID_CI_PhoneNumber
        {
            get { return _ID_CI_PhoneNumber; }
            set { _ID_CI_PhoneNumber = value; }
        }

        string _ID_CI_EmailUseType;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_EmailUseType.
        /// </summary>
        [TestVariable("a52d1069-d132-4f3c-8352-41daeac12827")]
        public string ID_CI_EmailUseType
        {
            get { return _ID_CI_EmailUseType; }
            set { _ID_CI_EmailUseType = value; }
        }

        string _ID_CI_Emailsource;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_Emailsource.
        /// </summary>
        [TestVariable("826da62e-4300-4298-857d-6d3b649aafef")]
        public string ID_CI_Emailsource
        {
            get { return _ID_CI_Emailsource; }
            set { _ID_CI_Emailsource = value; }
        }

        string _ID_CI_EmailID;

        /// <summary>
        /// Gets or sets the value of variable ID_CI_EmailID.
        /// </summary>
        [TestVariable("b61f8ed5-ea30-466a-924c-fd494dc7d461")]
        public string ID_CI_EmailID
        {
            get { return _ID_CI_EmailID; }
            set { _ID_CI_EmailID = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.Underwriting_Company_Header'", repo.ApplicationUnderTest.Underwriting_Company_HeaderInfo, new ActionTimeout(10000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.Underwriting_Company_HeaderInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_CompName' with focus on 'ApplicationUnderTest.ID_CI_Underwriting_CompName'.", repo.ApplicationUnderTest.ID_CI_Underwriting_CompNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.ID_CI_Underwriting_CompName.PressKeys(ID_CI_CompName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_PolicyNumber' with focus on 'ApplicationUnderTest.ID_CI_PolicyNumber'.", repo.ApplicationUnderTest.ID_CI_PolicyNumberInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.ID_CI_PolicyNumber.PressKeys(ID_CI_PolicyNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(3));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_ContactNumber' with focus on 'ApplicationUnderTest.ID_CI_ContactNumber'.", repo.ApplicationUnderTest.ID_CI_ContactNumberInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.ID_CI_ContactNumber.PressKeys(ID_CI_ContactNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_CI_State' on item 'ApplicationUnderTest.ID_CI_State'.", repo.ApplicationUnderTest.ID_CI_StateInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.ID_CI_State.Element.SetAttributeValue("TagValue", ID_CI_State);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_Address1' with focus on 'ApplicationUnderTest.ID_CI_Address1'.", repo.ApplicationUnderTest.ID_CI_Address1Info, new RecordItemIndex(6));
            repo.ApplicationUnderTest.ID_CI_Address1.PressKeys(ID_CI_Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_Address2' with focus on 'ApplicationUnderTest.ID_CI_Address2'.", repo.ApplicationUnderTest.ID_CI_Address2Info, new RecordItemIndex(7));
            repo.ApplicationUnderTest.ID_CI_Address2.PressKeys(ID_CI_Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_City' with focus on 'ApplicationUnderTest.ID_CI_City'.", repo.ApplicationUnderTest.ID_CI_CityInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.ID_CI_City.PressKeys(ID_CI_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_Zip' with focus on 'ApplicationUnderTest.ID_CI_Zip'.", repo.ApplicationUnderTest.ID_CI_ZipInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.ID_CI_Zip.PressKeys(ID_CI_Zip);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(11));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(12));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_CI_UseType' on item 'ApplicationUnderTest.ID_CI_UseType'.", repo.ApplicationUnderTest.ID_CI_UseTypeInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.ID_CI_UseType.Element.SetAttributeValue("TagValue", ID_CI_UseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_CI_PhoneType' on item 'ApplicationUnderTest.ID_CI_PhoneType'.", repo.ApplicationUnderTest.ID_CI_PhoneTypeInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.ID_CI_PhoneType.Element.SetAttributeValue("TagValue", ID_CI_PhoneType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_CI_Source' on item 'ApplicationUnderTest.ID_CI_Source'.", repo.ApplicationUnderTest.ID_CI_SourceInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.ID_CI_Source.Element.SetAttributeValue("TagValue", ID_CI_Source);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_PhoneNumber' with focus on 'ApplicationUnderTest.ID_CI_PhoneNumber'.", repo.ApplicationUnderTest.ID_CI_PhoneNumberInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.ID_CI_PhoneNumber.PressKeys(ID_CI_PhoneNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(18));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.EmailID_Header'", repo.ApplicationUnderTest.EmailID_HeaderInfo, new ActionTimeout(10000), new RecordItemIndex(19));
            repo.ApplicationUnderTest.EmailID_HeaderInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_CI_EmailUseType' on item 'ApplicationUnderTest.ID_CI_EmailUseType'.", repo.ApplicationUnderTest.ID_CI_EmailUseTypeInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.ID_CI_EmailUseType.Element.SetAttributeValue("TagValue", ID_CI_EmailUseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_CI_Emailsource' on item 'ApplicationUnderTest.ID_CI_EmailSource'.", repo.ApplicationUnderTest.ID_CI_EmailSourceInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.ID_CI_EmailSource.Element.SetAttributeValue("TagValue", ID_CI_Emailsource);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_CI_EmailID' with focus on 'ApplicationUnderTest.ID_CI_EmailID'.", repo.ApplicationUnderTest.ID_CI_EmailIDInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.ID_CI_EmailID.PressKeys(ID_CI_EmailID);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(23));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
