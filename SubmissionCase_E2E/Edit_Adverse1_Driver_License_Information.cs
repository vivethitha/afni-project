///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Edit_Adverse1_Driver_License_Information recording.
    /// </summary>
    [TestModule("525121f9-2f8b-413f-85ad-c7f987bf32ae", ModuleType.Recording, 1)]
    public partial class Edit_Adverse1_Driver_License_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Edit_Adverse1_Driver_License_Information instance = new Edit_Adverse1_Driver_License_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Edit_Adverse1_Driver_License_Information()
        {
            AD1_LI_LicenseNumber = "";
            Edit_AD1_LI_LicenseNumber = "ELICNO50001";
            AD1_LI_DriversLicenseState = "";
            Edit_AD1_LI_DriversLicenseState = "FA";
            AD1_LI_SSN_getValue = "";
            Edit_AD1_LI_SSN_getValue = "400011SSNE";
            AD1_LI_DOB_getValue = "";
            Edit_AD1_LI_DOB_getValue = "03/02/1993";
            AD1_LI_RevocationDate_getValue = "";
            Edit_AD1_LI_RevocationDate_getValue1 = "4/2/1994";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Edit_Adverse1_Driver_License_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _AD1_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_LicenseNumber.
        /// </summary>
        [TestVariable("a8bd0517-a2c0-40bd-a79d-4af39bef1e22")]
        public string AD1_LI_LicenseNumber
        {
            get { return _AD1_LI_LicenseNumber; }
            set { _AD1_LI_LicenseNumber = value; }
        }

        string _Edit_AD1_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD1_LI_LicenseNumber.
        /// </summary>
        [TestVariable("b24e909c-4643-4748-b5f0-c434916b2f75")]
        public string Edit_AD1_LI_LicenseNumber
        {
            get { return _Edit_AD1_LI_LicenseNumber; }
            set { _Edit_AD1_LI_LicenseNumber = value; }
        }

        string _AD1_LI_DriversLicenseState;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_DriversLicenseState.
        /// </summary>
        [TestVariable("08152194-d67d-41ee-8d70-f00f9a5522c0")]
        public string AD1_LI_DriversLicenseState
        {
            get { return _AD1_LI_DriversLicenseState; }
            set { _AD1_LI_DriversLicenseState = value; }
        }

        string _Edit_AD1_LI_DriversLicenseState;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD1_LI_DriversLicenseState.
        /// </summary>
        [TestVariable("b4eccc2a-2f9c-4136-955f-3966871e30f0")]
        public string Edit_AD1_LI_DriversLicenseState
        {
            get { return _Edit_AD1_LI_DriversLicenseState; }
            set { _Edit_AD1_LI_DriversLicenseState = value; }
        }

        string _AD1_LI_SSN_getValue;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_SSN_getValue.
        /// </summary>
        [TestVariable("cab28ae7-73da-468f-9df1-206578a75deb")]
        public string AD1_LI_SSN_getValue
        {
            get { return _AD1_LI_SSN_getValue; }
            set { _AD1_LI_SSN_getValue = value; }
        }

        string _Edit_AD1_LI_SSN_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD1_LI_SSN_getValue.
        /// </summary>
        [TestVariable("84f48c94-f617-4c4f-b90f-68defc9b4f7e")]
        public string Edit_AD1_LI_SSN_getValue
        {
            get { return _Edit_AD1_LI_SSN_getValue; }
            set { _Edit_AD1_LI_SSN_getValue = value; }
        }

        string _AD1_LI_DOB_getValue;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_DOB_getValue.
        /// </summary>
        [TestVariable("4c225b26-1614-408f-903c-05113221de78")]
        public string AD1_LI_DOB_getValue
        {
            get { return _AD1_LI_DOB_getValue; }
            set { _AD1_LI_DOB_getValue = value; }
        }

        string _Edit_AD1_LI_DOB_getValue;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD1_LI_DOB_getValue.
        /// </summary>
        [TestVariable("e662a597-f8e4-4fba-bf89-2422aab0507b")]
        public string Edit_AD1_LI_DOB_getValue
        {
            get { return _Edit_AD1_LI_DOB_getValue; }
            set { _Edit_AD1_LI_DOB_getValue = value; }
        }

        string _AD1_LI_RevocationDate_getValue;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_RevocationDate_getValue.
        /// </summary>
        [TestVariable("9125bdd5-f170-4f23-a082-c209073e540a")]
        public string AD1_LI_RevocationDate_getValue
        {
            get { return _AD1_LI_RevocationDate_getValue; }
            set { _AD1_LI_RevocationDate_getValue = value; }
        }

        string _Edit_AD1_LI_RevocationDate_getValue1;

        /// <summary>
        /// Gets or sets the value of variable Edit_AD1_LI_RevocationDate_getValue1.
        /// </summary>
        [TestVariable("1a758864-6c88-4ac3-8903-8f5291186549")]
        public string Edit_AD1_LI_RevocationDate_getValue1
        {
            get { return _Edit_AD1_LI_RevocationDate_getValue1; }
            set { _Edit_AD1_LI_RevocationDate_getValue1 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.LicenseInformation' at 72;22.", repo.ApplicationUnderTest.LicenseInformationInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.LicenseInformation.Click("72;22");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD1_LI_LicenseNumber) on item 'ApplicationUnderTest.AD1_LI_LicenseNumber'.", repo.ApplicationUnderTest.AD1_LI_LicenseNumberInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_LicenseNumberInfo, "TagValue", AD1_LI_LicenseNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD1_LI_LicenseNumber, new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(3));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(4));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AD1_LI_LicenseNumber' with focus on 'ApplicationUnderTest.AD1_LI_LicenseNumber'.", repo.ApplicationUnderTest.AD1_LI_LicenseNumberInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.AD1_LI_LicenseNumber.PressKeys(Edit_AD1_LI_LicenseNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD1_LI_LicenseNumber, new RecordItemIndex(6));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD1_LI_DriversLicenseState) on item 'ApplicationUnderTest.AD1_LI_DriversLicenseState'.", repo.ApplicationUnderTest.AD1_LI_DriversLicenseStateInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_DriversLicenseStateInfo, "TagValue", AD1_LI_DriversLicenseState);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD1_LI_DriversLicenseState, new RecordItemIndex(8));
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_AD1_LI_DriversLicenseState' on item 'ApplicationUnderTest.AD1_LI_DriversLicenseState'.", repo.ApplicationUnderTest.AD1_LI_DriversLicenseStateInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.AD1_LI_DriversLicenseState.Element.SetAttributeValue("TagValue", Edit_AD1_LI_DriversLicenseState);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_AD1_LI_DriversLicenseState, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD1_LI_SSN' and assigning its value to variable 'AD1_LI_SSN_getValue'.", repo.ApplicationUnderTest.AD1_LI_SSNInfo, new RecordItemIndex(11));
            AD1_LI_SSN_getValue = repo.ApplicationUnderTest.AD1_LI_SSN.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD1_LI_SSN_getValue) on item 'ApplicationUnderTest.AD1_LI_SSN'.", repo.ApplicationUnderTest.AD1_LI_SSNInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_SSNInfo, "TagValue", AD1_LI_SSN_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD1_LI_SSN_getValue, new RecordItemIndex(13));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(14));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(15));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AD1_LI_SSN_getValue' with focus on 'ApplicationUnderTest.AD1_LI_SSN'.", repo.ApplicationUnderTest.AD1_LI_SSNInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.AD1_LI_SSN.PressKeys(Edit_AD1_LI_SSN_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", "", new RecordItemIndex(17));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD1_LI_DOB' and assigning its value to variable 'AD1_LI_DOB_getValue'.", repo.ApplicationUnderTest.AD1_LI_DOBInfo, new RecordItemIndex(18));
            AD1_LI_DOB_getValue = repo.ApplicationUnderTest.AD1_LI_DOB.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD1_LI_DOB_getValue) on item 'ApplicationUnderTest.AD1_LI_DOB'.", repo.ApplicationUnderTest.AD1_LI_DOBInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_DOBInfo, "TagValue", AD1_LI_DOB_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD1_LI_DOB_getValue, new RecordItemIndex(20));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(21));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(22));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AD1_LI_DOB_getValue'.", new RecordItemIndex(23));
            Keyboard.Press(Edit_AD1_LI_DOB_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", Edit_AD1_LI_DOB_getValue, new RecordItemIndex(24));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD1_LI_RevocationDate' and assigning its value to variable 'AD1_LI_RevocationDate_getValue'.", repo.ApplicationUnderTest.AD1_LI_RevocationDateInfo, new RecordItemIndex(25));
            AD1_LI_RevocationDate_getValue = repo.ApplicationUnderTest.AD1_LI_RevocationDate.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD1_LI_RevocationDate_getValue) on item 'ApplicationUnderTest.AD1_LI_RevocationDate'.", repo.ApplicationUnderTest.AD1_LI_RevocationDateInfo, new RecordItemIndex(26));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_RevocationDateInfo, "TagValue", AD1_LI_RevocationDate_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD1_LI_RevocationDate_getValue, new RecordItemIndex(27));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press.", new RecordItemIndex(28));
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press.", new RecordItemIndex(29));
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_AD1_LI_RevocationDate_getValue1'.", new RecordItemIndex(30));
            Keyboard.Press(Edit_AD1_LI_RevocationDate_getValue1);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", Edit_AD1_LI_RevocationDate_getValue1, new RecordItemIndex(31));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'ApplicationUnderTest.AD1_LI_Revoke_CheckBox'.", repo.ApplicationUnderTest.AD1_LI_Revoke_CheckBoxInfo, new RecordItemIndex(32));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_Revoke_CheckBoxInfo, "Checked", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='true') on item 'ApplicationUnderTest.AD1_LI_Revoke_CheckBox'.", repo.ApplicationUnderTest.AD1_LI_Revoke_CheckBoxInfo, new RecordItemIndex(33));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD1_LI_Revoke_CheckBoxInfo, "Value", "true");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(34));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
