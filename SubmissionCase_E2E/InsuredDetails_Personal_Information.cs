///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The InsuredDetails_Personal_Information recording.
    /// </summary>
    [TestModule("dc34dd9a-b09f-4d7e-a5bc-06a6d4756bec", ModuleType.Recording, 1)]
    public partial class InsuredDetails_Personal_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static InsuredDetails_Personal_Information instance = new InsuredDetails_Personal_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public InsuredDetails_Personal_Information()
        {
            ID_PI_FirstName = "";
            ID_PI_LastName = "";
            ID_PI_Address1 = "";
            ID_PI_Address2 = "";
            ID_PI_City = "";
            ID_PI_State = "";
            ID_PI_Zip = "";
            ID_PI_DOB = "";
            ID_PI_UseType = "";
            ID_PI_PhoneType = "";
            ID_PI_Source = "";
            ID_PI_PhoneNumber = "";
            ID_PI_EmailUseType = "";
            ID_PI_EmailSource = "";
            ID_PI_EmailID = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static InsuredDetails_Personal_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _ID_PI_FirstName;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_FirstName.
        /// </summary>
        [TestVariable("faf08b0d-c282-4590-9893-bb172e08a816")]
        public string ID_PI_FirstName
        {
            get { return _ID_PI_FirstName; }
            set { _ID_PI_FirstName = value; }
        }

        string _ID_PI_LastName;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_LastName.
        /// </summary>
        [TestVariable("6d5854fe-0d06-4a58-a68c-04ab5ea340b8")]
        public string ID_PI_LastName
        {
            get { return _ID_PI_LastName; }
            set { _ID_PI_LastName = value; }
        }

        string _ID_PI_Address1;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_Address1.
        /// </summary>
        [TestVariable("2faf07ac-2048-4081-b62d-7eff55603072")]
        public string ID_PI_Address1
        {
            get { return _ID_PI_Address1; }
            set { _ID_PI_Address1 = value; }
        }

        string _ID_PI_Address2;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_Address2.
        /// </summary>
        [TestVariable("4d93408e-efca-4793-966d-26a1d53d3b34")]
        public string ID_PI_Address2
        {
            get { return _ID_PI_Address2; }
            set { _ID_PI_Address2 = value; }
        }

        string _ID_PI_City;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_City.
        /// </summary>
        [TestVariable("2721afc2-3d34-455e-b104-ceb57d26d4d6")]
        public string ID_PI_City
        {
            get { return _ID_PI_City; }
            set { _ID_PI_City = value; }
        }

        string _ID_PI_State;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_State.
        /// </summary>
        [TestVariable("49f2ec2b-f291-4c76-ad96-32526f62fb67")]
        public string ID_PI_State
        {
            get { return _ID_PI_State; }
            set { _ID_PI_State = value; }
        }

        string _ID_PI_Zip;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_Zip.
        /// </summary>
        [TestVariable("71ac8c84-67cd-4000-a81f-64b3da94a0ec")]
        public string ID_PI_Zip
        {
            get { return _ID_PI_Zip; }
            set { _ID_PI_Zip = value; }
        }

        string _ID_PI_DOB;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_DOB.
        /// </summary>
        [TestVariable("12e85a71-a158-4578-96f2-e52ada1acaac")]
        public string ID_PI_DOB
        {
            get { return _ID_PI_DOB; }
            set { _ID_PI_DOB = value; }
        }

        string _ID_PI_UseType;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_UseType.
        /// </summary>
        [TestVariable("fd85e25c-e6df-4dda-9cbd-9bd561e571f4")]
        public string ID_PI_UseType
        {
            get { return _ID_PI_UseType; }
            set { _ID_PI_UseType = value; }
        }

        string _ID_PI_PhoneType;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_PhoneType.
        /// </summary>
        [TestVariable("d2039ae6-3736-45f0-9d0b-b65b2fead11c")]
        public string ID_PI_PhoneType
        {
            get { return _ID_PI_PhoneType; }
            set { _ID_PI_PhoneType = value; }
        }

        string _ID_PI_Source;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_Source.
        /// </summary>
        [TestVariable("94ba5975-e149-4551-92ed-7db0bcccb27a")]
        public string ID_PI_Source
        {
            get { return _ID_PI_Source; }
            set { _ID_PI_Source = value; }
        }

        string _ID_PI_PhoneNumber;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_PhoneNumber.
        /// </summary>
        [TestVariable("b4848ee8-32e8-458d-8000-7b97c02195b3")]
        public string ID_PI_PhoneNumber
        {
            get { return _ID_PI_PhoneNumber; }
            set { _ID_PI_PhoneNumber = value; }
        }

        string _ID_PI_EmailUseType;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_EmailUseType.
        /// </summary>
        [TestVariable("0a601a93-6de6-4c59-a1dc-d74d6c8330aa")]
        public string ID_PI_EmailUseType
        {
            get { return _ID_PI_EmailUseType; }
            set { _ID_PI_EmailUseType = value; }
        }

        string _ID_PI_EmailSource;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_EmailSource.
        /// </summary>
        [TestVariable("aef69426-cc33-4518-98aa-135d6b3541b0")]
        public string ID_PI_EmailSource
        {
            get { return _ID_PI_EmailSource; }
            set { _ID_PI_EmailSource = value; }
        }

        string _ID_PI_EmailID;

        /// <summary>
        /// Gets or sets the value of variable ID_PI_EmailID.
        /// </summary>
        [TestVariable("8165e14c-f90a-4c01-9cac-a4f84c9554c7")]
        public string ID_PI_EmailID
        {
            get { return _ID_PI_EmailID; }
            set { _ID_PI_EmailID = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.ID_PI_FirstName'", repo.ApplicationUnderTest.ID_PI_FirstNameInfo, new ActionTimeout(10000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.ID_PI_FirstNameInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_FirstName' with focus on 'ApplicationUnderTest.ID_PI_FirstName'.", repo.ApplicationUnderTest.ID_PI_FirstNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.ID_PI_FirstName.PressKeys(ID_PI_FirstName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_LastName' with focus on 'ApplicationUnderTest.ID_PI_LastName'.", repo.ApplicationUnderTest.ID_PI_LastNameInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.ID_PI_LastName.PressKeys(ID_PI_LastName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_Address1' with focus on 'ApplicationUnderTest.ID_PI_Address1'.", repo.ApplicationUnderTest.ID_PI_Address1Info, new RecordItemIndex(3));
            repo.ApplicationUnderTest.ID_PI_Address1.PressKeys(ID_PI_Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_Address2' with focus on 'ApplicationUnderTest.ID_PI_Address2'.", repo.ApplicationUnderTest.ID_PI_Address2Info, new RecordItemIndex(4));
            repo.ApplicationUnderTest.ID_PI_Address2.PressKeys(ID_PI_Address2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_City' with focus on 'ApplicationUnderTest.ID_PI_City'.", repo.ApplicationUnderTest.ID_PI_CityInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.ID_PI_City.PressKeys(ID_PI_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_State' on item 'ApplicationUnderTest.ID_PI_State'.", repo.ApplicationUnderTest.ID_PI_StateInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.ID_PI_State.Element.SetAttributeValue("TagValue", ID_PI_State);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_Zip' with focus on 'ApplicationUnderTest.ID_PI_Zip'.", repo.ApplicationUnderTest.ID_PI_ZipInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.ID_PI_Zip.PressKeys(ID_PI_Zip);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_DOB' on item 'ApplicationUnderTest.ID_PI_DOB'.", repo.ApplicationUnderTest.ID_PI_DOBInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.ID_PI_DOB.Element.SetAttributeValue("TagValue", ID_PI_DOB);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(10));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(11));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(12));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(13));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_UseType' on item 'ApplicationUnderTest.ID_PI_UseType'.", repo.ApplicationUnderTest.ID_PI_UseTypeInfo, new RecordItemIndex(14));
            repo.ApplicationUnderTest.ID_PI_UseType.Element.SetAttributeValue("TagValue", ID_PI_UseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_PhoneType' on item 'ApplicationUnderTest.ID_PI_PhoneType'.", repo.ApplicationUnderTest.ID_PI_PhoneTypeInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.ID_PI_PhoneType.Element.SetAttributeValue("TagValue", ID_PI_PhoneType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_Source' on item 'ApplicationUnderTest.ID_PI_Source'.", repo.ApplicationUnderTest.ID_PI_SourceInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.ID_PI_Source.Element.SetAttributeValue("TagValue", ID_PI_Source);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_PhoneNumber' with focus on 'ApplicationUnderTest.ID_PI_PhoneNumber'.", repo.ApplicationUnderTest.ID_PI_PhoneNumberInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.ID_PI_PhoneNumber.PressKeys(ID_PI_PhoneNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(18));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(19));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_EmailUseType' on item 'ApplicationUnderTest.ID_PI_EmailUseType'.", repo.ApplicationUnderTest.ID_PI_EmailUseTypeInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.ID_PI_EmailUseType.Element.SetAttributeValue("TagValue", ID_PI_EmailUseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ID_PI_EmailSource' on item 'ApplicationUnderTest.ID_PI_EmailSource'.", repo.ApplicationUnderTest.ID_PI_EmailSourceInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.ID_PI_EmailSource.Element.SetAttributeValue("TagValue", ID_PI_EmailSource);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ID_PI_EmailID' with focus on 'ApplicationUnderTest.ID_PI_EmailID'.", repo.ApplicationUnderTest.ID_PI_EmailIDInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.ID_PI_EmailID.PressKeys(ID_PI_EmailID);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(23));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(24));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
