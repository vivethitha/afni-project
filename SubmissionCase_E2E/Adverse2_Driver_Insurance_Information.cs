///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse2_Driver_Insurance_Information recording.
    /// </summary>
    [TestModule("99c02ef6-aa09-411d-ab89-fc8533803b21", ModuleType.Recording, 1)]
    public partial class Adverse2_Driver_Insurance_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse2_Driver_Insurance_Information instance = new Adverse2_Driver_Insurance_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse2_Driver_Insurance_Information()
        {
            AD2_IL_InsuranceCompany = "";
            AD2_IL_PolicyNumber = "";
            AD2_IL_ClaimNumber = "";
            AD2_IL_ContactName = "";
            AD2_IL_State = "";
            AD2_IL_Address1 = "";
            AD2_IL_Address2 = "";
            AD2_IL_City = "";
            AD2_IL_Zipcode = "";
            AD2_IL_PhoneUseType = "";
            AD2_IL_PhoneType = "";
            AD2_IL_PhoneSource = "";
            AD2_IL_PhoneNumber = "";
            AD2_IL_EmailUseType = "";
            AD2_IL_EmailSource = "";
            AD2_IL_email = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse2_Driver_Insurance_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _AD2_IL_InsuranceCompany;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_InsuranceCompany.
        /// </summary>
        [TestVariable("848b5aa3-9d52-4735-a060-143791b39b0e")]
        public string AD2_IL_InsuranceCompany
        {
            get { return _AD2_IL_InsuranceCompany; }
            set { _AD2_IL_InsuranceCompany = value; }
        }

        string _AD2_IL_PolicyNumber;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_PolicyNumber.
        /// </summary>
        [TestVariable("ebf7d9f6-115d-4d87-828a-e9e5d508cddd")]
        public string AD2_IL_PolicyNumber
        {
            get { return _AD2_IL_PolicyNumber; }
            set { _AD2_IL_PolicyNumber = value; }
        }

        string _AD2_IL_ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_ClaimNumber.
        /// </summary>
        [TestVariable("53804bf8-9761-42a8-8c68-1c9344b0bb18")]
        public string AD2_IL_ClaimNumber
        {
            get { return _AD2_IL_ClaimNumber; }
            set { _AD2_IL_ClaimNumber = value; }
        }

        string _AD2_IL_ContactName;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_ContactName.
        /// </summary>
        [TestVariable("6782e564-0b7a-42f2-9aa4-536e19ef1e37")]
        public string AD2_IL_ContactName
        {
            get { return _AD2_IL_ContactName; }
            set { _AD2_IL_ContactName = value; }
        }

        string _AD2_IL_State;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_State.
        /// </summary>
        [TestVariable("e0a3eca0-b70a-48cb-b77f-b3df4cca22e1")]
        public string AD2_IL_State
        {
            get { return _AD2_IL_State; }
            set { _AD2_IL_State = value; }
        }

        string _AD2_IL_Address1;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_Address1.
        /// </summary>
        [TestVariable("76ce4e6c-beee-4159-93ee-1e48df99a940")]
        public string AD2_IL_Address1
        {
            get { return _AD2_IL_Address1; }
            set { _AD2_IL_Address1 = value; }
        }

        string _AD2_IL_Address2;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_Address2.
        /// </summary>
        [TestVariable("6615b833-7651-4875-a80e-371714755215")]
        public string AD2_IL_Address2
        {
            get { return _AD2_IL_Address2; }
            set { _AD2_IL_Address2 = value; }
        }

        string _AD2_IL_City;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_City.
        /// </summary>
        [TestVariable("1556709e-98af-45b6-9e16-5aa920dffd8c")]
        public string AD2_IL_City
        {
            get { return _AD2_IL_City; }
            set { _AD2_IL_City = value; }
        }

        string _AD2_IL_Zipcode;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_Zipcode.
        /// </summary>
        [TestVariable("be2556c4-8e46-42be-92ef-e14aaf9036ad")]
        public string AD2_IL_Zipcode
        {
            get { return _AD2_IL_Zipcode; }
            set { _AD2_IL_Zipcode = value; }
        }

        string _AD2_IL_PhoneUseType;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_PhoneUseType.
        /// </summary>
        [TestVariable("85b646a2-5f61-4574-b5bf-d44c3c02517c")]
        public string AD2_IL_PhoneUseType
        {
            get { return _AD2_IL_PhoneUseType; }
            set { _AD2_IL_PhoneUseType = value; }
        }

        string _AD2_IL_PhoneType;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_PhoneType.
        /// </summary>
        [TestVariable("b234348f-70e2-4073-95b3-26a47d83150d")]
        public string AD2_IL_PhoneType
        {
            get { return _AD2_IL_PhoneType; }
            set { _AD2_IL_PhoneType = value; }
        }

        string _AD2_IL_PhoneSource;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_PhoneSource.
        /// </summary>
        [TestVariable("5e5956ab-ca98-4f65-a485-fc81682794e6")]
        public string AD2_IL_PhoneSource
        {
            get { return _AD2_IL_PhoneSource; }
            set { _AD2_IL_PhoneSource = value; }
        }

        string _AD2_IL_PhoneNumber;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_PhoneNumber.
        /// </summary>
        [TestVariable("bf3b812e-9aff-4980-adcd-86d59560cf43")]
        public string AD2_IL_PhoneNumber
        {
            get { return _AD2_IL_PhoneNumber; }
            set { _AD2_IL_PhoneNumber = value; }
        }

        string _AD2_IL_EmailUseType;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_EmailUseType.
        /// </summary>
        [TestVariable("6060ac1c-e69e-41b2-85c4-2c9853d1c5f8")]
        public string AD2_IL_EmailUseType
        {
            get { return _AD2_IL_EmailUseType; }
            set { _AD2_IL_EmailUseType = value; }
        }

        string _AD2_IL_EmailSource;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_EmailSource.
        /// </summary>
        [TestVariable("7007edaf-9fc2-4d7a-9f5e-712da4a9c69c")]
        public string AD2_IL_EmailSource
        {
            get { return _AD2_IL_EmailSource; }
            set { _AD2_IL_EmailSource = value; }
        }

        string _AD2_IL_email;

        /// <summary>
        /// Gets or sets the value of variable AD2_IL_email.
        /// </summary>
        [TestVariable("ec47f3d7-3f2e-4b12-951e-a37c052bdc19")]
        public string AD2_IL_email
        {
            get { return _AD2_IL_email; }
            set { _AD2_IL_email = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.AD2_IL_PolicyNumber'", repo.ApplicationUnderTest.AD2_IL_PolicyNumberInfo, new ActionTimeout(10000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.AD2_IL_PolicyNumberInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_InsuranceCompany' on item 'ApplicationUnderTest.AD2_IL_CompanyName'.", repo.ApplicationUnderTest.AD2_IL_CompanyNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.AD2_IL_CompanyName.Element.SetAttributeValue("TagValue", AD2_IL_InsuranceCompany);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_PolicyNumber' with focus on 'ApplicationUnderTest.AD2_IL_PolicyNumber'.", repo.ApplicationUnderTest.AD2_IL_PolicyNumberInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AD2_IL_PolicyNumber.PressKeys(AD2_IL_PolicyNumber);
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AD2_IL_ClaimNumber' at Center.", repo.ApplicationUnderTest.AD2_IL_ClaimNumberInfo, new RecordItemIndex(3));
            //repo.ApplicationUnderTest.AD2_IL_ClaimNumber.Click();
            //Delay.Milliseconds(9700);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(4));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(5));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AD2_IL_ClaimNumber' at Center.", repo.ApplicationUnderTest.AD2_IL_ClaimNumberInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AD2_IL_ClaimNumber.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_ClaimNumber' with focus on 'ApplicationUnderTest.AD2_IL_ClaimNumber'.", repo.ApplicationUnderTest.AD2_IL_ClaimNumberInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.AD2_IL_ClaimNumber.PressKeys(AD2_IL_ClaimNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(8));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AD2_IL_ContactName' at Center.", repo.ApplicationUnderTest.AD2_IL_ContactNameInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.AD2_IL_ContactName.Click();
            Delay.Milliseconds(9700);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_ContactName' with focus on 'ApplicationUnderTest.AD2_IL_ContactName'.", repo.ApplicationUnderTest.AD2_IL_ContactNameInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.AD2_IL_ContactName.PressKeys(AD2_IL_ContactName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_State' on item 'ApplicationUnderTest.AD2_IL_State'.", repo.ApplicationUnderTest.AD2_IL_StateInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.AD2_IL_State.Element.SetAttributeValue("TagValue", AD2_IL_State);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_Address1' with focus on 'ApplicationUnderTest.AD2_IL_Address1'.", repo.ApplicationUnderTest.AD2_IL_Address1Info, new RecordItemIndex(12));
            repo.ApplicationUnderTest.AD2_IL_Address1.PressKeys(AD2_IL_Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_Address2' with focus on 'ApplicationUnderTest.AD2_IL_Address2'.", repo.ApplicationUnderTest.AD2_IL_Address2Info, new RecordItemIndex(13));
            repo.ApplicationUnderTest.AD2_IL_Address2.PressKeys(AD2_IL_Address2);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_City' with focus on 'ApplicationUnderTest.AD2_IL_City'.", repo.ApplicationUnderTest.AD2_IL_CityInfo, new RecordItemIndex(15));
            repo.ApplicationUnderTest.AD2_IL_City.PressKeys(AD2_IL_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_Zipcode' with focus on 'ApplicationUnderTest.AD2_IL_Zipcode'.", repo.ApplicationUnderTest.AD2_IL_ZipcodeInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.AD2_IL_Zipcode.PressKeys(AD2_IL_Zipcode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(17));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(18));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_PhoneUseType' on item 'ApplicationUnderTest.AD2_IL_PhoneUseType'.", repo.ApplicationUnderTest.AD2_IL_PhoneUseTypeInfo, new RecordItemIndex(19));
            repo.ApplicationUnderTest.AD2_IL_PhoneUseType.Element.SetAttributeValue("TagValue", AD2_IL_PhoneUseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_PhoneType' on item 'ApplicationUnderTest.AD2_IL_PhoneType'.", repo.ApplicationUnderTest.AD2_IL_PhoneTypeInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.AD2_IL_PhoneType.Element.SetAttributeValue("TagValue", AD2_IL_PhoneType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_PhoneSource' on item 'ApplicationUnderTest.AD2_IL_PhoneSource'.", repo.ApplicationUnderTest.AD2_IL_PhoneSourceInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.AD2_IL_PhoneSource.Element.SetAttributeValue("TagValue", AD2_IL_PhoneSource);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_PhoneNumber' with focus on 'ApplicationUnderTest.AD2_IL_PhoneNumber'.", repo.ApplicationUnderTest.AD2_IL_PhoneNumberInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.AD2_IL_PhoneNumber.PressKeys(AD2_IL_PhoneNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(23));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Enter' Press.", new RecordItemIndex(24));
            Keyboard.Press(System.Windows.Forms.Keys.Return, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ApplicationUnderTest.AD2_IL_EmailUseType'", repo.ApplicationUnderTest.AD2_IL_EmailUseTypeInfo, new ActionTimeout(5000), new RecordItemIndex(25));
            repo.ApplicationUnderTest.AD2_IL_EmailUseTypeInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_EmailUseType' on item 'ApplicationUnderTest.AD2_IL_EmailUseType'.", repo.ApplicationUnderTest.AD2_IL_EmailUseTypeInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.AD2_IL_EmailUseType.Element.SetAttributeValue("TagValue", AD2_IL_EmailUseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD2_IL_EmailSource' on item 'ApplicationUnderTest.AD2_IL_EmailSource'.", repo.ApplicationUnderTest.AD2_IL_EmailSourceInfo, new RecordItemIndex(27));
            repo.ApplicationUnderTest.AD2_IL_EmailSource.Element.SetAttributeValue("TagValue", AD2_IL_EmailSource);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD2_IL_email' with focus on 'ApplicationUnderTest.AD2_IL_email'.", repo.ApplicationUnderTest.AD2_IL_emailInfo, new RecordItemIndex(28));
            repo.ApplicationUnderTest.AD2_IL_email.PressKeys(AD2_IL_email);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(29));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
