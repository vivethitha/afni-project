///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse1_Owner_License_Information_Save recording.
    /// </summary>
    [TestModule("513996fa-33f6-4666-ac3a-0c9c4adb7a4d", ModuleType.Recording, 1)]
    public partial class Adverse1_Owner_License_Information_Save : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse1_Owner_License_Information_Save instance = new Adverse1_Owner_License_Information_Save();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse1_Owner_License_Information_Save()
        {
            AO_LI_SSN = "";
            AO_LI_DateOfBirth_getValue = "";
            AO_LI_LicenseNumber = "";
            AO_LI_LicenseState = "";
            AO_LI_RevocationDate_getValue = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse1_Owner_License_Information_Save Instance
        {
            get { return instance; }
        }

#region Variables

        string _AO_LI_SSN;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_SSN.
        /// </summary>
        [TestVariable("5aaee6df-722e-4314-b06b-df7989319967")]
        public string AO_LI_SSN
        {
            get { return _AO_LI_SSN; }
            set { _AO_LI_SSN = value; }
        }

        string _AO_LI_DateOfBirth_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_DateOfBirth_getValue.
        /// </summary>
        [TestVariable("32b053bb-cf58-4f17-a41c-44e6b44d9d65")]
        public string AO_LI_DateOfBirth_getValue
        {
            get { return _AO_LI_DateOfBirth_getValue; }
            set { _AO_LI_DateOfBirth_getValue = value; }
        }

        string _AO_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_LicenseNumber.
        /// </summary>
        [TestVariable("06920302-f1db-4833-94ad-039b0380786c")]
        public string AO_LI_LicenseNumber
        {
            get { return _AO_LI_LicenseNumber; }
            set { _AO_LI_LicenseNumber = value; }
        }

        string _AO_LI_LicenseState;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_LicenseState.
        /// </summary>
        [TestVariable("e58da3fe-5da1-4d74-991b-0e9035df3f54")]
        public string AO_LI_LicenseState
        {
            get { return _AO_LI_LicenseState; }
            set { _AO_LI_LicenseState = value; }
        }

        string _AO_LI_RevocationDate_getValue;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_RevocationDate_getValue.
        /// </summary>
        [TestVariable("8801fb1c-7dc3-4f22-9176-087303fe26d7")]
        public string AO_LI_RevocationDate_getValue
        {
            get { return _AO_LI_RevocationDate_getValue; }
            set { _AO_LI_RevocationDate_getValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue='O_Employment Place') on item 'ApplicationUnderTest.AO_LI_EmploymentPlace'.", repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, new RecordItemIndex(2));
            //Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, "TagValue", "O_Employment Place");
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_SSN' and assigning its value to variable 'AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(3));
            AO_LI_SSN = repo.ApplicationUnderTest.AO_LI_SSN.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_SSN) on item 'ApplicationUnderTest.AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_SSNInfo, "TagValue", AO_LI_SSN);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_SSN, new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_DateOfBirth' and assigning its value to variable 'AO_LI_DateOfBirth_getValue'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(6));
            AO_LI_DateOfBirth_getValue = repo.ApplicationUnderTest.AO_LI_DateOfBirth.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_DateOfBirth_getValue, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_DateOfBirth_getValue) on item 'ApplicationUnderTest.AO_LI_DateOfBirth'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, "TagValue", AO_LI_DateOfBirth_getValue);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_LicenseNumber' and assigning its value to variable 'AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(9));
            //AO_LI_LicenseNumber = repo.ApplicationUnderTest.AO_LI_LicenseNumber.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_LicenseNumber) on item 'ApplicationUnderTest.AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, "TagValue", AO_LI_LicenseNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_LicenseNumber, new RecordItemIndex(11));
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_LicenseState' and assigning its value to variable 'AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(12));
            //AO_LI_LicenseState = repo.ApplicationUnderTest.AO_LI_LicenseState.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_LicenseState) on item 'ApplicationUnderTest.AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, "TagValue", AO_LI_LicenseState);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_LicenseState, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AO_LI_RevocationDate' and assigning its value to variable 'AO_LI_RevocationDate_getValue'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(15));
            AO_LI_RevocationDate_getValue = repo.ApplicationUnderTest.AO_LI_RevocationDate.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AO_LI_RevocationDate_getValue) on item 'ApplicationUnderTest.AO_LI_RevocationDate'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(16));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, "TagValue", AO_LI_RevocationDate_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AO_LI_RevocationDate_getValue, new RecordItemIndex(17));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='True') on item 'ApplicationUnderTest.AO_LI_Revoked'.", repo.ApplicationUnderTest.AO_LI_RevokedInfo, new RecordItemIndex(18));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevokedInfo, "Checked", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Value='true') on item 'ApplicationUnderTest.AO_LI_Revoked'.", repo.ApplicationUnderTest.AO_LI_RevokedInfo, new RecordItemIndex(19));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AO_LI_RevokedInfo, "Value", "true");
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(20));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 46;15.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(21));
            repo.ApplicationUnderTest.SubmitButton1.Click("46;15");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
