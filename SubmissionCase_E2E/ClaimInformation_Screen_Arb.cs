///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ClaimInformation_Screen_Arb recording.
    /// </summary>
    [TestModule("176fe831-14ad-4205-9679-b34a1228b077", ModuleType.Recording, 1)]
    public partial class ClaimInformation_Screen_Arb : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static ClaimInformation_Screen_Arb instance = new ClaimInformation_Screen_Arb();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ClaimInformation_Screen_Arb()
        {
            ClaimInformation_AccoutType = "";
            ClaimInformation_ProjectName = "";
            ClaimInformation_ClaimType = "";
            ClaimInformation_Product = "";
            ClaimInformation_DateOfLoss = "";
            ClaimInformation_AmountofLoss = "";
            ClaimInformation_DeductibleAmount = "";
            ClaimInformation_Street = "";
            ClaimInformation_City = "";
            ClaimInformation_StateOfLoss = "";
            ClaimInformation_Police_Report_No = "";
            ClaimInformation_AFNI_Liability = "";
            ClaimInformation_Client_Liability = "";
            ClaimInformation_AccidentType = "";
            ClaimInformation_IncidentFacts = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ClaimInformation_Screen_Arb Instance
        {
            get { return instance; }
        }

#region Variables

        string _ClaimInformation_AccoutType;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AccoutType.
        /// </summary>
        [TestVariable("67f91f73-a04f-4ef7-a655-fa7fba0185b6")]
        public string ClaimInformation_AccoutType
        {
            get { return _ClaimInformation_AccoutType; }
            set { _ClaimInformation_AccoutType = value; }
        }

        string _ClaimInformation_ProjectName;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_ProjectName.
        /// </summary>
        [TestVariable("e888d68b-6f12-4a60-86e8-724adefb7b32")]
        public string ClaimInformation_ProjectName
        {
            get { return _ClaimInformation_ProjectName; }
            set { _ClaimInformation_ProjectName = value; }
        }

        string _ClaimInformation_ClaimType;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_ClaimType.
        /// </summary>
        [TestVariable("aee2e6f5-77b6-4ca0-b0d5-cede7b20a8a8")]
        public string ClaimInformation_ClaimType
        {
            get { return _ClaimInformation_ClaimType; }
            set { _ClaimInformation_ClaimType = value; }
        }

        string _ClaimInformation_Product;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Product.
        /// </summary>
        [TestVariable("3d30a3ac-9a27-49a3-8a3e-89a16f0bbf80")]
        public string ClaimInformation_Product
        {
            get { return _ClaimInformation_Product; }
            set { _ClaimInformation_Product = value; }
        }

        string _ClaimInformation_DateOfLoss;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_DateOfLoss.
        /// </summary>
        [TestVariable("df208b6f-fee2-459f-af58-3bd3c2a18e03")]
        public string ClaimInformation_DateOfLoss
        {
            get { return _ClaimInformation_DateOfLoss; }
            set { _ClaimInformation_DateOfLoss = value; }
        }

        string _ClaimInformation_AmountofLoss;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AmountofLoss.
        /// </summary>
        [TestVariable("9b967aff-b17d-49a5-b23e-2661ce52ca11")]
        public string ClaimInformation_AmountofLoss
        {
            get { return _ClaimInformation_AmountofLoss; }
            set { _ClaimInformation_AmountofLoss = value; }
        }

        string _ClaimInformation_DeductibleAmount;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_DeductibleAmount.
        /// </summary>
        [TestVariable("01003e43-49f9-469f-b282-d9dcdffaffdb")]
        public string ClaimInformation_DeductibleAmount
        {
            get { return _ClaimInformation_DeductibleAmount; }
            set { _ClaimInformation_DeductibleAmount = value; }
        }

        string _ClaimInformation_Street;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Street.
        /// </summary>
        [TestVariable("3c00c5a7-ca02-48cc-be50-f402ef0c392f")]
        public string ClaimInformation_Street
        {
            get { return _ClaimInformation_Street; }
            set { _ClaimInformation_Street = value; }
        }

        string _ClaimInformation_City;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_City.
        /// </summary>
        [TestVariable("0a2fc8ed-46fe-46f3-ae4d-bc945a2ad728")]
        public string ClaimInformation_City
        {
            get { return _ClaimInformation_City; }
            set { _ClaimInformation_City = value; }
        }

        string _ClaimInformation_StateOfLoss;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_StateOfLoss.
        /// </summary>
        [TestVariable("df36c255-dc70-40b9-af18-88e4d9d9cc55")]
        public string ClaimInformation_StateOfLoss
        {
            get { return _ClaimInformation_StateOfLoss; }
            set { _ClaimInformation_StateOfLoss = value; }
        }

        string _ClaimInformation_Police_Report_No;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Police_Report_No.
        /// </summary>
        [TestVariable("60662fbc-7c0d-4983-b880-d20745c77030")]
        public string ClaimInformation_Police_Report_No
        {
            get { return _ClaimInformation_Police_Report_No; }
            set { _ClaimInformation_Police_Report_No = value; }
        }

        string _ClaimInformation_AFNI_Liability;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AFNI_Liability.
        /// </summary>
        [TestVariable("8b6839f7-fda7-4268-b863-575099ce23dd")]
        public string ClaimInformation_AFNI_Liability
        {
            get { return _ClaimInformation_AFNI_Liability; }
            set { _ClaimInformation_AFNI_Liability = value; }
        }

        string _ClaimInformation_Client_Liability;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Client_Liability.
        /// </summary>
        [TestVariable("1e92020d-2b7f-4ff4-a5b9-7b7b6f271672")]
        public string ClaimInformation_Client_Liability
        {
            get { return _ClaimInformation_Client_Liability; }
            set { _ClaimInformation_Client_Liability = value; }
        }

        string _ClaimInformation_AccidentType;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AccidentType.
        /// </summary>
        [TestVariable("b2be107a-1776-40bc-865d-9e37baf20a6d")]
        public string ClaimInformation_AccidentType
        {
            get { return _ClaimInformation_AccidentType; }
            set { _ClaimInformation_AccidentType = value; }
        }

        string _ClaimInformation_IncidentFacts;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_IncidentFacts.
        /// </summary>
        [TestVariable("c7a21a4e-b228-4c71-812c-11675750f28b")]
        public string ClaimInformation_IncidentFacts
        {
            get { return _ClaimInformation_IncidentFacts; }
            set { _ClaimInformation_IncidentFacts = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            // Claim Information screen
            Report.Log(ReportLevel.Info, "Section", "Claim Information screen", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 45s to exist. Associated repository item: 'ApplicationUnderTest.ClaimInformation_AccountType'", repo.ApplicationUnderTest.ClaimInformation_AccountTypeInfo, new ActionTimeout(45000), new RecordItemIndex(1));
            repo.ApplicationUnderTest.ClaimInformation_AccountTypeInfo.WaitForExists(45000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Pending-ClaimInformation') on item 'ApplicationUnderTest.Pending_ClaimInformation'.", repo.ApplicationUnderTest.Pending_ClaimInformationInfo, new RecordItemIndex(2));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Pending_ClaimInformationInfo, "InnerText", "Pending-ClaimInformation");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_AccoutType' on item 'ApplicationUnderTest.ClaimInformation_AccountType'.", repo.ApplicationUnderTest.ClaimInformation_AccountTypeInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.ClaimInformation_AccountType.Element.SetAttributeValue("TagValue", ClaimInformation_AccoutType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_ProjectName' on item 'ApplicationUnderTest.ClaimInformation_ProjectName'.", repo.ApplicationUnderTest.ClaimInformation_ProjectNameInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.ClaimInformation_ProjectName.Element.SetAttributeValue("TagValue", ClaimInformation_ProjectName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_ClaimType' on item 'ApplicationUnderTest.ClaimInformation_ClaimType'.", repo.ApplicationUnderTest.ClaimInformation_ClaimTypeInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.ClaimInformation_ClaimType.Element.SetAttributeValue("TagValue", ClaimInformation_ClaimType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(6));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_DateOfLoss' on item 'ApplicationUnderTest.ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.ClaimInformation_DateOfLossInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.ClaimInformation_DateOfLoss.Element.SetAttributeValue("TagValue", ClaimInformation_DateOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(8));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClaimInformation_AmountofLoss' with focus on 'ApplicationUnderTest.ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.ClaimInformation_AmountofLossInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.ClaimInformation_AmountofLoss.PressKeys(ClaimInformation_AmountofLoss);
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_AmountofLoss' on item 'ApplicationUnderTest.ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.ClaimInformation_AmountofLossInfo, new RecordItemIndex(10));
            //repo.ApplicationUnderTest.ClaimInformation_AmountofLoss.Element.SetAttributeValue("TagValue", ClaimInformation_AmountofLoss);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(11));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClaimInformation_DeductibleAmount' with focus on 'ApplicationUnderTest.ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(12));
            repo.ApplicationUnderTest.ClaimInformation_DeductibleAmount.PressKeys(ClaimInformation_DeductibleAmount);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_DeductibleAmount' on item 'ApplicationUnderTest.ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(13));
            repo.ApplicationUnderTest.ClaimInformation_DeductibleAmount.Element.SetAttributeValue("TagValue", ClaimInformation_DeductibleAmount);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(14));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_Street' on item 'ApplicationUnderTest.ClaimInformation_Street'.", repo.ApplicationUnderTest.ClaimInformation_StreetInfo, new RecordItemIndex(16));
            repo.ApplicationUnderTest.ClaimInformation_Street.Element.SetAttributeValue("TagValue", ClaimInformation_Street);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(17));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_City' on item 'ApplicationUnderTest.ClaimInformation_City'.", repo.ApplicationUnderTest.ClaimInformation_CityInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.ClaimInformation_City.Element.SetAttributeValue("TagValue", ClaimInformation_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(19));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_StateOfLoss' on item 'ApplicationUnderTest.ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.ClaimInformation_StateOfLossInfo, new RecordItemIndex(20));
            repo.ApplicationUnderTest.ClaimInformation_StateOfLoss.Element.SetAttributeValue("TagValue", ClaimInformation_StateOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(21));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClaimInformation_Police_Report_No' with focus on 'ApplicationUnderTest.ClaimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.ClaimInformation_PoliceReportNo.PressKeys(ClaimInformation_Police_Report_No);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(23));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClaimInformation_AFNI_Liability' with focus on 'ApplicationUnderTest.ClaimInformation_AFNI_Liability'.", repo.ApplicationUnderTest.ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.ClaimInformation_AFNI_Liability.PressKeys(ClaimInformation_AFNI_Liability);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(25));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClaimInformation_Client_Liability' with focus on 'ApplicationUnderTest.ClaimInformation_Client_Liability'.", repo.ApplicationUnderTest.ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(26));
            repo.ApplicationUnderTest.ClaimInformation_Client_Liability.PressKeys(ClaimInformation_Client_Liability);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(27));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(28));
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$ClaimInformation_AccidentType' on item 'ApplicationUnderTest.ClaimInformation_Accident_Type'.", repo.ApplicationUnderTest.ClaimInformation_Accident_TypeInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.ClaimInformation_Accident_Type.Element.SetAttributeValue("TagValue", ClaimInformation_AccidentType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(30));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ClaimInformation_TotalLoss' at 6;8.", repo.ApplicationUnderTest.ClaimInformation_TotalLossInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.ClaimInformation_TotalLoss.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.ClaimInformation_TotalLoss_True'", repo.ApplicationUnderTest.ClaimInformation_TotalLoss_TrueInfo, new ActionTimeout(30000), new RecordItemIndex(32));
            repo.ApplicationUnderTest.ClaimInformation_TotalLoss_TrueInfo.WaitForExists(30000);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.ApplicationUnderTest.ClaimInformation_TotalLoss, false, new RecordItemIndex(33));
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Test' with focus on 'ApplicationUnderTest.ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.ClaimInformation_IncidentFactsInfo, new RecordItemIndex(34));
            //repo.ApplicationUnderTest.ClaimInformation_IncidentFacts.PressKeys("Test");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ClaimInformation_IncidentFacts' with focus on 'ApplicationUnderTest.ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.ClaimInformation_IncidentFactsInfo, new RecordItemIndex(35));
            repo.ApplicationUnderTest.ClaimInformation_IncidentFacts.PressKeys(ClaimInformation_IncidentFacts);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(36));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 41;11.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(37));
            repo.ApplicationUnderTest.SubmitButton1.Click("41;11");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
