///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse1_Driver_Insurance_Information recording.
    /// </summary>
    [TestModule("634d1a6d-2443-4de7-a76b-09cf1e83720b", ModuleType.Recording, 1)]
    public partial class Adverse1_Driver_Insurance_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse1_Driver_Insurance_Information instance = new Adverse1_Driver_Insurance_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse1_Driver_Insurance_Information()
        {
            AD1_LI_PolicyNumber = "";
            AD1_LI_ClaimNumber = "";
            AD1_LI_ContactName = "";
            AD1_LI_USStateCode = "";
            AD1_LI_Address1 = "";
            AD1_LI_Address2 = "";
            AD1_LI_City = "";
            AD1_LI_ZipCode = "";
            AD1_LI_PhoneUseType = "";
            AD1_LI_PhoneType = "";
            AD1_LI_PhoneSource = "";
            AD1_LI_PhoneNumber = "";
            AD1_LI_EmailUseType = "";
            AD1_LI_EmailSource = "";
            AD1_LI_Email = "";
            AD1_LI_CompanyName = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse1_Driver_Insurance_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _AD1_LI_PolicyNumber;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_PolicyNumber.
        /// </summary>
        [TestVariable("d71e07b4-4ba2-4a5d-84b7-5f9806945ba9")]
        public string AD1_LI_PolicyNumber
        {
            get { return _AD1_LI_PolicyNumber; }
            set { _AD1_LI_PolicyNumber = value; }
        }

        string _AD1_LI_ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_ClaimNumber.
        /// </summary>
        [TestVariable("498d1b93-e6ea-4509-be78-e6ab38b6fd77")]
        public string AD1_LI_ClaimNumber
        {
            get { return _AD1_LI_ClaimNumber; }
            set { _AD1_LI_ClaimNumber = value; }
        }

        string _AD1_LI_ContactName;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_ContactName.
        /// </summary>
        [TestVariable("639e5ea2-5c3c-481b-b884-a9f5f70f4090")]
        public string AD1_LI_ContactName
        {
            get { return _AD1_LI_ContactName; }
            set { _AD1_LI_ContactName = value; }
        }

        string _AD1_LI_USStateCode;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_USStateCode.
        /// </summary>
        [TestVariable("79fb8bee-34ce-42da-80d4-58171e03858a")]
        public string AD1_LI_USStateCode
        {
            get { return _AD1_LI_USStateCode; }
            set { _AD1_LI_USStateCode = value; }
        }

        string _AD1_LI_Address1;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_Address1.
        /// </summary>
        [TestVariable("d1c27164-b3bf-4282-acdb-49ef715c8540")]
        public string AD1_LI_Address1
        {
            get { return _AD1_LI_Address1; }
            set { _AD1_LI_Address1 = value; }
        }

        string _AD1_LI_Address2;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_Address2.
        /// </summary>
        [TestVariable("39a32b26-3986-4985-9696-83794b47fbae")]
        public string AD1_LI_Address2
        {
            get { return _AD1_LI_Address2; }
            set { _AD1_LI_Address2 = value; }
        }

        string _AD1_LI_City;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_City.
        /// </summary>
        [TestVariable("da1e82ed-30a9-4148-ad1d-964c693400b5")]
        public string AD1_LI_City
        {
            get { return _AD1_LI_City; }
            set { _AD1_LI_City = value; }
        }

        string _AD1_LI_ZipCode;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_ZipCode.
        /// </summary>
        [TestVariable("53397d16-7c89-45b0-873f-6c2b777fb6f7")]
        public string AD1_LI_ZipCode
        {
            get { return _AD1_LI_ZipCode; }
            set { _AD1_LI_ZipCode = value; }
        }

        string _AD1_LI_PhoneUseType;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_PhoneUseType.
        /// </summary>
        [TestVariable("c1a15db2-e0c9-4043-b6ed-e8d7ed938e89")]
        public string AD1_LI_PhoneUseType
        {
            get { return _AD1_LI_PhoneUseType; }
            set { _AD1_LI_PhoneUseType = value; }
        }

        string _AD1_LI_PhoneType;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_PhoneType.
        /// </summary>
        [TestVariable("edcd401b-8b5e-4738-8ce8-80137bcf0add")]
        public string AD1_LI_PhoneType
        {
            get { return _AD1_LI_PhoneType; }
            set { _AD1_LI_PhoneType = value; }
        }

        string _AD1_LI_PhoneSource;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_PhoneSource.
        /// </summary>
        [TestVariable("c4e3a1a8-2f85-4989-b68a-691f38efeb6d")]
        public string AD1_LI_PhoneSource
        {
            get { return _AD1_LI_PhoneSource; }
            set { _AD1_LI_PhoneSource = value; }
        }

        string _AD1_LI_PhoneNumber;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_PhoneNumber.
        /// </summary>
        [TestVariable("bdd13943-025e-41a3-a0e9-ca3fa427f5db")]
        public string AD1_LI_PhoneNumber
        {
            get { return _AD1_LI_PhoneNumber; }
            set { _AD1_LI_PhoneNumber = value; }
        }

        string _AD1_LI_EmailUseType;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_EmailUseType.
        /// </summary>
        [TestVariable("2df3d5cb-ba4e-4703-af55-7dd26c156275")]
        public string AD1_LI_EmailUseType
        {
            get { return _AD1_LI_EmailUseType; }
            set { _AD1_LI_EmailUseType = value; }
        }

        string _AD1_LI_EmailSource;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_EmailSource.
        /// </summary>
        [TestVariable("e754401a-9877-4e1a-943c-c4776d487527")]
        public string AD1_LI_EmailSource
        {
            get { return _AD1_LI_EmailSource; }
            set { _AD1_LI_EmailSource = value; }
        }

        string _AD1_LI_Email;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_Email.
        /// </summary>
        [TestVariable("a6ae7e2d-e2af-4af4-9e59-d8857c7514c2")]
        public string AD1_LI_Email
        {
            get { return _AD1_LI_Email; }
            set { _AD1_LI_Email = value; }
        }

        string _AD1_LI_CompanyName;

        /// <summary>
        /// Gets or sets the value of variable AD1_LI_CompanyName.
        /// </summary>
        [TestVariable("1d1d3e03-b8d2-4115-8374-94f7557ce50a")]
        public string AD1_LI_CompanyName
        {
            get { return _AD1_LI_CompanyName; }
            set { _AD1_LI_CompanyName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.Adverse_Driver_Insurance_Header'", repo.ApplicationUnderTest.Adverse_Driver_Insurance_HeaderInfo, new ActionTimeout(10000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.Adverse_Driver_Insurance_HeaderInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_CompanyName' on item 'ApplicationUnderTest.AD1_LI_CompanyName'.", repo.ApplicationUnderTest.AD1_LI_CompanyNameInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.AD1_LI_CompanyName.Element.SetAttributeValue("TagValue", AD1_LI_CompanyName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_PolicyNumber' with focus on 'ApplicationUnderTest.AD1_LI_PolicyNumber'.", repo.ApplicationUnderTest.AD1_LI_PolicyNumberInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AD1_LI_PolicyNumber.PressKeys(AD1_LI_PolicyNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(3));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(4));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AD1_LI_ClaimNumber' at Center.", repo.ApplicationUnderTest.AD1_LI_ClaimNumberInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.AD1_LI_ClaimNumber.Click();
            Delay.Milliseconds(9700);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_ClaimNumber' with focus on 'ApplicationUnderTest.AD1_LI_ClaimNumber'.", repo.ApplicationUnderTest.AD1_LI_ClaimNumberInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AD1_LI_ClaimNumber.PressKeys(AD1_LI_ClaimNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(7));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(8));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AD1_LI_ContactName' at Center.", repo.ApplicationUnderTest.AD1_LI_ContactNameInfo, new RecordItemIndex(9));
            repo.ApplicationUnderTest.AD1_LI_ContactName.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_ContactName' with focus on 'ApplicationUnderTest.AD1_LI_ContactName'.", repo.ApplicationUnderTest.AD1_LI_ContactNameInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.AD1_LI_ContactName.PressKeys(AD1_LI_ContactName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_USStateCode' on item 'ApplicationUnderTest.AD1_LI_USStateCode'.", repo.ApplicationUnderTest.AD1_LI_USStateCodeInfo, new RecordItemIndex(11));
            repo.ApplicationUnderTest.AD1_LI_USStateCode.Element.SetAttributeValue("TagValue", AD1_LI_USStateCode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(12));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_Address1' with focus on 'ApplicationUnderTest.AD1_LI_Address1'.", repo.ApplicationUnderTest.AD1_LI_Address1Info, new RecordItemIndex(13));
            repo.ApplicationUnderTest.AD1_LI_Address1.PressKeys(AD1_LI_Address1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_Address2' with focus on 'ApplicationUnderTest.AD1_LI_Address2'.", repo.ApplicationUnderTest.AD1_LI_Address2Info, new RecordItemIndex(14));
            repo.ApplicationUnderTest.AD1_LI_Address2.PressKeys(AD1_LI_Address2);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(15));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse scroll Vertical by -240 units.", new RecordItemIndex(16));
            Mouse.ScrollWheel(-240);
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_City' with focus on 'ApplicationUnderTest.AD1_LI_City'.", repo.ApplicationUnderTest.AD1_LI_CityInfo, new RecordItemIndex(17));
            repo.ApplicationUnderTest.AD1_LI_City.PressKeys(AD1_LI_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_ZipCode' with focus on 'ApplicationUnderTest.AD1_LI_ZipCode'.", repo.ApplicationUnderTest.AD1_LI_ZipCodeInfo, new RecordItemIndex(18));
            repo.ApplicationUnderTest.AD1_LI_ZipCode.PressKeys(AD1_LI_ZipCode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(19));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(20));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_PhoneUseType' on item 'ApplicationUnderTest.AD1_LI_PhoneUseType'.", repo.ApplicationUnderTest.AD1_LI_PhoneUseTypeInfo, new RecordItemIndex(21));
            repo.ApplicationUnderTest.AD1_LI_PhoneUseType.Element.SetAttributeValue("TagValue", AD1_LI_PhoneUseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_PhoneType' on item 'ApplicationUnderTest.AD1_LI_PhoneType'.", repo.ApplicationUnderTest.AD1_LI_PhoneTypeInfo, new RecordItemIndex(22));
            repo.ApplicationUnderTest.AD1_LI_PhoneType.Element.SetAttributeValue("TagValue", AD1_LI_PhoneType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_PhoneSource' on item 'ApplicationUnderTest.AD1_LI_PhoneSource'.", repo.ApplicationUnderTest.AD1_LI_PhoneSourceInfo, new RecordItemIndex(23));
            repo.ApplicationUnderTest.AD1_LI_PhoneSource.Element.SetAttributeValue("TagValue", AD1_LI_PhoneSource);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}' with focus on 'ApplicationUnderTest.AD1_LI_PhoneSource'.", repo.ApplicationUnderTest.AD1_LI_PhoneSourceInfo, new RecordItemIndex(24));
            repo.ApplicationUnderTest.AD1_LI_PhoneSource.PressKeys("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_PhoneNumber' with focus on 'ApplicationUnderTest.AD1_LI_PhoneNumber'.", repo.ApplicationUnderTest.AD1_LI_PhoneNumberInfo, new RecordItemIndex(25));
            repo.ApplicationUnderTest.AD1_LI_PhoneNumber.PressKeys(AD1_LI_PhoneNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(26));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(27));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(28));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_EmailUseType' on item 'ApplicationUnderTest.AD1_LI_EmailUseType'.", repo.ApplicationUnderTest.AD1_LI_EmailUseTypeInfo, new RecordItemIndex(29));
            repo.ApplicationUnderTest.AD1_LI_EmailUseType.Element.SetAttributeValue("TagValue", AD1_LI_EmailUseType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AD1_LI_EmailSource' on item 'ApplicationUnderTest.AD1_LI_EmailSource'.", repo.ApplicationUnderTest.AD1_LI_EmailSourceInfo, new RecordItemIndex(30));
            repo.ApplicationUnderTest.AD1_LI_EmailSource.Element.SetAttributeValue("TagValue", AD1_LI_EmailSource);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AD1_LI_Email' with focus on 'ApplicationUnderTest.AD1_LI_Email'.", repo.ApplicationUnderTest.AD1_LI_EmailInfo, new RecordItemIndex(31));
            repo.ApplicationUnderTest.AD1_LI_Email.PressKeys(AD1_LI_Email);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(32));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(33));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
