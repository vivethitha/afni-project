///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse_Other_Information recording.
    /// </summary>
    [TestModule("7bee7048-698f-44e5-b7fa-6d53a5b5a324", ModuleType.Recording, 1)]
    public partial class Adverse_Other_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse_Other_Information instance = new Adverse_Other_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse_Other_Information()
        {
            COL = "";
            CauseofLoss = "";
            Accident_description = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse_Other_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _COL;

        /// <summary>
        /// Gets or sets the value of variable COL.
        /// </summary>
        [TestVariable("4a0da57f-7e90-4a58-b3a5-013c85891946")]
        public string COL
        {
            get { return _COL; }
            set { _COL = value; }
        }

        string _CauseofLoss;

        /// <summary>
        /// Gets or sets the value of variable CauseofLoss.
        /// </summary>
        [TestVariable("3ead49a8-e4f5-4233-a465-4b639c62eb6e")]
        public string CauseofLoss
        {
            get { return _CauseofLoss; }
            set { _CauseofLoss = value; }
        }

        string _Accident_description;

        /// <summary>
        /// Gets or sets the value of variable Accident_description.
        /// </summary>
        [TestVariable("d274e464-0db3-41c7-87e8-3918785b32a1")]
        public string Accident_description
        {
            get { return _Accident_description; }
            set { _Accident_description = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.OtherInfo_Header'", repo.ApplicationUnderTest.OtherInfo_HeaderInfo, new ActionTimeout(10000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.OtherInfo_HeaderInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$CauseofLoss' with focus on 'ApplicationUnderTest.CauseofLoss'.", repo.ApplicationUnderTest.CauseofLossInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.CauseofLoss.PressKeys(CauseofLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}' with focus on 'ApplicationUnderTest.CauseofLoss'.", repo.ApplicationUnderTest.CauseofLossInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.CauseofLoss.PressKeys("{Down}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(3));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(4));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Accident_description' with focus on 'ApplicationUnderTest.AccidentDescription'.", repo.ApplicationUnderTest.AccidentDescriptionInfo, new RecordItemIndex(5));
            repo.ApplicationUnderTest.AccidentDescription.PressKeys(Accident_description);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(6));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(7));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
