///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The AdverseType recording.
    /// </summary>
    [TestModule("e86beaa0-55ea-4847-81d4-8968dd9a9363", ModuleType.Recording, 1)]
    public partial class AdverseType : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static AdverseType instance = new AdverseType();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public AdverseType()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static AdverseType Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AdverseType_AddAdverseInfo' at 52;9.", repo.ApplicationUnderTest.AdverseType_AddAdverseInfoInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.AdverseType_AddAdverseInfo.Click("52;9");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AdverseType_AddAdverseInfo' at 52;9.", repo.ApplicationUnderTest.AdverseType_AddAdverseInfoInfo, new RecordItemIndex(2));
            repo.ApplicationUnderTest.AdverseType_AddAdverseInfo.Click("52;9");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(3));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to 'Other' on item 'ApplicationUnderTest.AdverseType_Other'.", repo.ApplicationUnderTest.AdverseType_OtherInfo, new RecordItemIndex(4));
            repo.ApplicationUnderTest.AdverseType_Other.Element.SetAttributeValue("TagValue", "Other");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(5));
            Delay.Duration(500, false);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(6));
            
            // Validation start
            Report.Log(ReportLevel.Info, "Section", "Validation start", new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Pending-ClaimInformation') on item 'ApplicationUnderTest.Pending_ClaimInformation'.", repo.ApplicationUnderTest.Pending_ClaimInformationInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Pending_ClaimInformationInfo, "InnerText", "Pending-ClaimInformation");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Adverse Information (Vehicle)') on item 'ApplicationUnderTest.AdverseInformationVehicle'.", repo.ApplicationUnderTest.AdverseInformationVehicleInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AdverseInformationVehicleInfo, "InnerText", "Adverse Information (Vehicle)");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Adverse Information (Vehicle)') on item 'ApplicationUnderTest.AdverseInformationVehicle_2'.", repo.ApplicationUnderTest.AdverseInformationVehicle_2Info, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AdverseInformationVehicle_2Info, "InnerText", "Adverse Information (Vehicle)");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Adverse Information (Other)') on item 'ApplicationUnderTest.AdverseInformationVehicle_Other'.", repo.ApplicationUnderTest.AdverseInformationVehicle_OtherInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AdverseInformationVehicle_OtherInfo, "InnerText", "Adverse Information (Other)");
            Delay.Milliseconds(100);
            
            // Validation End
            Report.Log(ReportLevel.Info, "Section", "Validation End", new RecordItemIndex(12));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
