///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse2_Driver_License_Information_Save recording.
    /// </summary>
    [TestModule("e742604c-3df0-416f-8c39-eb4909421af4", ModuleType.Recording, 1)]
    public partial class Adverse2_Driver_License_Information_Save : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse2_Driver_License_Information_Save instance = new Adverse2_Driver_License_Information_Save();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse2_Driver_License_Information_Save()
        {
            AD2_LI_LicenseNumber = "";
            AD2_LI_DriversLicenseState = "";
            AD2_LI_SSN = "";
            AD2_LI_DOB = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse2_Driver_License_Information_Save Instance
        {
            get { return instance; }
        }

#region Variables

        string _AD2_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable AD2_LI_LicenseNumber.
        /// </summary>
        [TestVariable("fc1f3210-1849-4bff-9ccd-15dffece6b43")]
        public string AD2_LI_LicenseNumber
        {
            get { return _AD2_LI_LicenseNumber; }
            set { _AD2_LI_LicenseNumber = value; }
        }

        string _AD2_LI_DriversLicenseState;

        /// <summary>
        /// Gets or sets the value of variable AD2_LI_DriversLicenseState.
        /// </summary>
        [TestVariable("c43bab2f-6e51-431d-baa3-6b2e623351ec")]
        public string AD2_LI_DriversLicenseState
        {
            get { return _AD2_LI_DriversLicenseState; }
            set { _AD2_LI_DriversLicenseState = value; }
        }

        string _AD2_LI_SSN;

        /// <summary>
        /// Gets or sets the value of variable AD2_LI_SSN.
        /// </summary>
        [TestVariable("a51aab4d-2945-4064-9a96-abcd980981a1")]
        public string AD2_LI_SSN
        {
            get { return _AD2_LI_SSN; }
            set { _AD2_LI_SSN = value; }
        }

        string _AD2_LI_DOB;

        /// <summary>
        /// Gets or sets the value of variable AD2_LI_DOB.
        /// </summary>
        [TestVariable("c666e1f2-01aa-485a-a3bd-05701ec69ac6")]
        public string AD2_LI_DOB
        {
            get { return _AD2_LI_DOB; }
            set { _AD2_LI_DOB = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD2_LI_LicenseNumber' and assigning its value to variable 'AD2_LI_LicenseNumber'.", repo.ApplicationUnderTest.AD2_LI_LicenseNumberInfo, new RecordItemIndex(2));
            //AD2_LI_LicenseNumber = repo.ApplicationUnderTest.AD2_LI_LicenseNumber.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD2_LI_LicenseNumber) on item 'ApplicationUnderTest.AD2_LI_LicenseNumber'.", repo.ApplicationUnderTest.AD2_LI_LicenseNumberInfo, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_LI_LicenseNumberInfo, "TagValue", AD2_LI_LicenseNumber);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD2_LI_LicenseNumber, new RecordItemIndex(4));
            
            //Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD2_LI_DriversLicenseState' and assigning its value to variable 'AD2_LI_DriversLicenseState'.", repo.ApplicationUnderTest.AD2_LI_DriversLicenseStateInfo, new RecordItemIndex(5));
            //AD2_LI_DriversLicenseState = repo.ApplicationUnderTest.AD2_LI_DriversLicenseState.Element.GetAttributeValueText("TagValue");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD2_LI_DriversLicenseState) on item 'ApplicationUnderTest.AD2_LI_DriversLicenseState'.", repo.ApplicationUnderTest.AD2_LI_DriversLicenseStateInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_LI_DriversLicenseStateInfo, "TagValue", AD2_LI_DriversLicenseState);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "User", AD2_LI_DriversLicenseState, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD2_LI_SSN' and assigning its value to variable 'AD2_LI_SSN'.", repo.ApplicationUnderTest.AD2_LI_SSNInfo, new RecordItemIndex(8));
            AD2_LI_SSN = repo.ApplicationUnderTest.AD2_LI_SSN.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AD2_LI_SSN, new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD2_LI_SSN) on item 'ApplicationUnderTest.AD2_LI_SSN'.", repo.ApplicationUnderTest.AD2_LI_SSNInfo, new RecordItemIndex(10));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_LI_SSNInfo, "TagValue", AD2_LI_SSN);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.AD2_LI_DOB' and assigning its value to variable 'AD2_LI_DOB'.", repo.ApplicationUnderTest.AD2_LI_DOBInfo, new RecordItemIndex(11));
            AD2_LI_DOB = repo.ApplicationUnderTest.AD2_LI_DOB.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", AD2_LI_DOB, new RecordItemIndex(12));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$AD2_LI_DOB) on item 'ApplicationUnderTest.AD2_LI_DOB'.", repo.ApplicationUnderTest.AD2_LI_DOBInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.ApplicationUnderTest.AD2_LI_DOBInfo, "TagValue", AD2_LI_DOB);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 46;15.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(15));
            repo.ApplicationUnderTest.SubmitButton1.Click("46;15");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
