///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Edit_ClaimInformation_Page recording.
    /// </summary>
    [TestModule("ecca6e59-3030-415c-bd73-f98f47307f92", ModuleType.Recording, 1)]
    public partial class Edit_ClaimInformation_Page : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Edit_ClaimInformation_Page instance = new Edit_ClaimInformation_Page();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Edit_ClaimInformation_Page()
        {
            ClaimInformation_AccoutType = "";
            ClaimInformation_ClientName = "";
            ClaimInformation_ClaimNumber = "";
            ClaimInformation_ProjectName = "";
            ClaimInformation_ClaimType = "";
            ClaimInformation_Product = "";
            claimInformation_DataOfLoss_getValue = "";
            Edit_ClaimInformation_DataOfLoss = "6/12/2019";
            ClaimInformation_AmountofLoss_getValue = "";
            Edit_ClaimInformation_AmountOfLoss = "5423";
            ClaimInformation_DeductibleAmount_getValue = "";
            Edit_Claim_Information_DeductibleAmount = "600";
            ClaimInformation_Street_getValue = "";
            Edit_ClaimInformation_Street = "EI_Street";
            ClaimInformation_City_getValue = "";
            Edit_ClaimInformation_City = "EI_City";
            ClaimInformation_StateOfLoss_getValue = "";
            Edit_Claim_Information_StateOfLoss = "AR";
            ClaimInformation_PoliceReportNo_getValue = "";
            Edit_claimInformation_PoliceReportNo = "EI_Police_Report_No";
            ClaimInformation_Afni_Liability = "";
            Edit_Claim_Afni_Liability = "25";
            ClaimInformation_Client_Liability = "";
            Edit_ClaimInfomation_Client_Liability = "50";
            ClaimInformation_AccidentType_getValue = "";
            Edit_ClaimInfroamtion_AccidentType = "Merging";
            ClaimInformation_IncidentFacts_getValue = "";
            ClaimInformation_IncidentFacts = "";
            Edit_ClaimInformation_IncidentFacts = "EI_Test";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Edit_ClaimInformation_Page Instance
        {
            get { return instance; }
        }

#region Variables

        string _ClaimInformation_AccoutType;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AccoutType.
        /// </summary>
        [TestVariable("88478c7a-c5cc-48f7-aea1-e191264989fe")]
        public string ClaimInformation_AccoutType
        {
            get { return _ClaimInformation_AccoutType; }
            set { _ClaimInformation_AccoutType = value; }
        }

        string _ClaimInformation_ClientName;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_ClientName.
        /// </summary>
        [TestVariable("6c3989eb-153f-47df-b6b4-68b3f06465c6")]
        public string ClaimInformation_ClientName
        {
            get { return _ClaimInformation_ClientName; }
            set { _ClaimInformation_ClientName = value; }
        }

        string _ClaimInformation_ClaimNumber;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_ClaimNumber.
        /// </summary>
        [TestVariable("9f0027ab-944e-4fec-8cc4-7fb4f5c9b899")]
        public string ClaimInformation_ClaimNumber
        {
            get { return _ClaimInformation_ClaimNumber; }
            set { _ClaimInformation_ClaimNumber = value; }
        }

        string _ClaimInformation_ProjectName;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_ProjectName.
        /// </summary>
        [TestVariable("47881eca-48cf-4335-8505-607c3d3a73f1")]
        public string ClaimInformation_ProjectName
        {
            get { return _ClaimInformation_ProjectName; }
            set { _ClaimInformation_ProjectName = value; }
        }

        string _ClaimInformation_ClaimType;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_ClaimType.
        /// </summary>
        [TestVariable("be150553-b025-42e2-8ba3-35f452c000e4")]
        public string ClaimInformation_ClaimType
        {
            get { return _ClaimInformation_ClaimType; }
            set { _ClaimInformation_ClaimType = value; }
        }

        string _ClaimInformation_Product;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Product.
        /// </summary>
        [TestVariable("65ed01e1-8cb0-45ad-83f0-8181ab7474c1")]
        public string ClaimInformation_Product
        {
            get { return _ClaimInformation_Product; }
            set { _ClaimInformation_Product = value; }
        }

        string _claimInformation_DataOfLoss_getValue;

        /// <summary>
        /// Gets or sets the value of variable claimInformation_DataOfLoss_getValue.
        /// </summary>
        [TestVariable("0943e9bd-479c-409b-ad40-c303fa5106a2")]
        public string claimInformation_DataOfLoss_getValue
        {
            get { return _claimInformation_DataOfLoss_getValue; }
            set { _claimInformation_DataOfLoss_getValue = value; }
        }

        string _Edit_ClaimInformation_DataOfLoss;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInformation_DataOfLoss.
        /// </summary>
        [TestVariable("baade094-c98a-4d79-ab2b-fb9032c64826")]
        public string Edit_ClaimInformation_DataOfLoss
        {
            get { return _Edit_ClaimInformation_DataOfLoss; }
            set { _Edit_ClaimInformation_DataOfLoss = value; }
        }

        string _ClaimInformation_AmountofLoss_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AmountofLoss_getValue.
        /// </summary>
        [TestVariable("ad58d84c-a08b-4483-a39f-382c5f367f3b")]
        public string ClaimInformation_AmountofLoss_getValue
        {
            get { return _ClaimInformation_AmountofLoss_getValue; }
            set { _ClaimInformation_AmountofLoss_getValue = value; }
        }

        string _Edit_ClaimInformation_AmountOfLoss;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInformation_AmountOfLoss.
        /// </summary>
        [TestVariable("cb76ad43-fa2b-45ee-b37e-ba2341b5a9be")]
        public string Edit_ClaimInformation_AmountOfLoss
        {
            get { return _Edit_ClaimInformation_AmountOfLoss; }
            set { _Edit_ClaimInformation_AmountOfLoss = value; }
        }

        string _ClaimInformation_DeductibleAmount_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_DeductibleAmount_getValue.
        /// </summary>
        [TestVariable("9b5787e7-22e1-4250-9922-4d23e065360d")]
        public string ClaimInformation_DeductibleAmount_getValue
        {
            get { return _ClaimInformation_DeductibleAmount_getValue; }
            set { _ClaimInformation_DeductibleAmount_getValue = value; }
        }

        string _Edit_Claim_Information_DeductibleAmount;

        /// <summary>
        /// Gets or sets the value of variable Edit_Claim_Information_DeductibleAmount.
        /// </summary>
        [TestVariable("c62fd2ca-b7e5-46dd-bbf1-44a39442d057")]
        public string Edit_Claim_Information_DeductibleAmount
        {
            get { return _Edit_Claim_Information_DeductibleAmount; }
            set { _Edit_Claim_Information_DeductibleAmount = value; }
        }

        string _ClaimInformation_Street_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Street_getValue.
        /// </summary>
        [TestVariable("ee12d0f5-0d93-44a4-8af2-5357587687f0")]
        public string ClaimInformation_Street_getValue
        {
            get { return _ClaimInformation_Street_getValue; }
            set { _ClaimInformation_Street_getValue = value; }
        }

        string _Edit_ClaimInformation_Street;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInformation_Street.
        /// </summary>
        [TestVariable("b33ca0ff-b0ab-4420-ac3a-82c3b411b53f")]
        public string Edit_ClaimInformation_Street
        {
            get { return _Edit_ClaimInformation_Street; }
            set { _Edit_ClaimInformation_Street = value; }
        }

        string _ClaimInformation_City_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_City_getValue.
        /// </summary>
        [TestVariable("7d2eb26f-2406-4fe2-8d20-10369693d2b5")]
        public string ClaimInformation_City_getValue
        {
            get { return _ClaimInformation_City_getValue; }
            set { _ClaimInformation_City_getValue = value; }
        }

        string _Edit_ClaimInformation_City;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInformation_City.
        /// </summary>
        [TestVariable("ee751ab8-eca3-46d6-993e-9774d67c03c1")]
        public string Edit_ClaimInformation_City
        {
            get { return _Edit_ClaimInformation_City; }
            set { _Edit_ClaimInformation_City = value; }
        }

        string _ClaimInformation_StateOfLoss_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_StateOfLoss_getValue.
        /// </summary>
        [TestVariable("76d3ffa6-e417-44fa-a2eb-0b965bb9f763")]
        public string ClaimInformation_StateOfLoss_getValue
        {
            get { return _ClaimInformation_StateOfLoss_getValue; }
            set { _ClaimInformation_StateOfLoss_getValue = value; }
        }

        string _Edit_Claim_Information_StateOfLoss;

        /// <summary>
        /// Gets or sets the value of variable Edit_Claim_Information_StateOfLoss.
        /// </summary>
        [TestVariable("108b9563-8769-4161-832d-f61f1c930f3d")]
        public string Edit_Claim_Information_StateOfLoss
        {
            get { return _Edit_Claim_Information_StateOfLoss; }
            set { _Edit_Claim_Information_StateOfLoss = value; }
        }

        string _ClaimInformation_PoliceReportNo_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_PoliceReportNo_getValue.
        /// </summary>
        [TestVariable("f8f60e7b-f949-4eae-af3f-1139e83293eb")]
        public string ClaimInformation_PoliceReportNo_getValue
        {
            get { return _ClaimInformation_PoliceReportNo_getValue; }
            set { _ClaimInformation_PoliceReportNo_getValue = value; }
        }

        string _Edit_claimInformation_PoliceReportNo;

        /// <summary>
        /// Gets or sets the value of variable Edit_claimInformation_PoliceReportNo.
        /// </summary>
        [TestVariable("ef416aab-54e5-4ef6-a6a8-ab98016581e5")]
        public string Edit_claimInformation_PoliceReportNo
        {
            get { return _Edit_claimInformation_PoliceReportNo; }
            set { _Edit_claimInformation_PoliceReportNo = value; }
        }

        string _ClaimInformation_Afni_Liability;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Afni_Liability.
        /// </summary>
        [TestVariable("4482076e-9fab-4dbf-99f7-9379a238dd11")]
        public string ClaimInformation_Afni_Liability
        {
            get { return _ClaimInformation_Afni_Liability; }
            set { _ClaimInformation_Afni_Liability = value; }
        }

        string _Edit_Claim_Afni_Liability;

        /// <summary>
        /// Gets or sets the value of variable Edit_Claim_Afni_Liability.
        /// </summary>
        [TestVariable("fa3cf278-dc46-4dcc-94be-616cf4d30c7b")]
        public string Edit_Claim_Afni_Liability
        {
            get { return _Edit_Claim_Afni_Liability; }
            set { _Edit_Claim_Afni_Liability = value; }
        }

        string _ClaimInformation_Client_Liability;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_Client_Liability.
        /// </summary>
        [TestVariable("794fe95e-a046-4585-bb6a-b728dda20177")]
        public string ClaimInformation_Client_Liability
        {
            get { return _ClaimInformation_Client_Liability; }
            set { _ClaimInformation_Client_Liability = value; }
        }

        string _Edit_ClaimInfomation_Client_Liability;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInfomation_Client_Liability.
        /// </summary>
        [TestVariable("060735cb-7dde-497b-90af-9621c89d2d65")]
        public string Edit_ClaimInfomation_Client_Liability
        {
            get { return _Edit_ClaimInfomation_Client_Liability; }
            set { _Edit_ClaimInfomation_Client_Liability = value; }
        }

        string _ClaimInformation_AccidentType_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_AccidentType_getValue.
        /// </summary>
        [TestVariable("192c1f9a-61c4-4fae-95ae-137bd6313341")]
        public string ClaimInformation_AccidentType_getValue
        {
            get { return _ClaimInformation_AccidentType_getValue; }
            set { _ClaimInformation_AccidentType_getValue = value; }
        }

        string _Edit_ClaimInfroamtion_AccidentType;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInfroamtion_AccidentType.
        /// </summary>
        [TestVariable("793c5b6e-3c3e-42c5-a6ef-cec36f817054")]
        public string Edit_ClaimInfroamtion_AccidentType
        {
            get { return _Edit_ClaimInfroamtion_AccidentType; }
            set { _Edit_ClaimInfroamtion_AccidentType = value; }
        }

        string _ClaimInformation_IncidentFacts_getValue;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_IncidentFacts_getValue.
        /// </summary>
        [TestVariable("84a14e4c-bab1-493c-b455-9c309777acbb")]
        public string ClaimInformation_IncidentFacts_getValue
        {
            get { return _ClaimInformation_IncidentFacts_getValue; }
            set { _ClaimInformation_IncidentFacts_getValue = value; }
        }

        string _ClaimInformation_IncidentFacts;

        /// <summary>
        /// Gets or sets the value of variable ClaimInformation_IncidentFacts.
        /// </summary>
        [TestVariable("0168413f-ebea-4f8d-92fa-51ba48f8e49c")]
        public string ClaimInformation_IncidentFacts
        {
            get { return _ClaimInformation_IncidentFacts; }
            set { _ClaimInformation_IncidentFacts = value; }
        }

        string _Edit_ClaimInformation_IncidentFacts;

        /// <summary>
        /// Gets or sets the value of variable Edit_ClaimInformation_IncidentFacts.
        /// </summary>
        [TestVariable("f85fc25b-0e8b-41d5-8826-55c24ac1e572")]
        public string Edit_ClaimInformation_IncidentFacts
        {
            get { return _Edit_ClaimInformation_IncidentFacts; }
            set { _Edit_ClaimInformation_IncidentFacts = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.ReviewSubmissionInformationBelow'", repo.ApplicationUnderTest.ReviewSubmissionInformationBelowInfo, new ActionTimeout(30000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.ReviewSubmissionInformationBelowInfo.WaitForExists(30000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Review Claim Information') on item 'ApplicationUnderTest.ReviewSubmissionInformationBelow'.", repo.ApplicationUnderTest.ReviewSubmissionInformationBelowInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ReviewSubmissionInformationBelowInfo, "InnerText", "Review Claim Information");
            Delay.Milliseconds(100);
            
            //Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Submit_Review' at Center.", repo.ApplicationUnderTest.Submit_ReviewInfo, new RecordItemIndex(2));
            //repo.ApplicationUnderTest.Submit_Review.Click();
            //Delay.Milliseconds(200);
            
            //Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(3));
            
            //Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.Actions_Button'", repo.ApplicationUnderTest.Actions_ButtonInfo, new ActionTimeout(30000), new RecordItemIndex(4));
            //repo.ApplicationUnderTest.Actions_ButtonInfo.WaitForExists(30000);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Resolved-Completed') on item 'ApplicationUnderTest.CaseStatus_Resolved_Completed'.", repo.ApplicationUnderTest.CaseStatus_Resolved_CompletedInfo, new RecordItemIndex(5));
            //Validate.AttributeEqual(repo.ApplicationUnderTest.CaseStatus_Resolved_CompletedInfo, "InnerText", "Resolved-Completed");
            //Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Actions') on item 'ApplicationUnderTest.Actions1'.", repo.ApplicationUnderTest.Actions1Info, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Actions1Info, "InnerText", "Actions");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Actions1' at 55;18.", repo.ApplicationUnderTest.Actions1Info, new RecordItemIndex(7));
            repo.ApplicationUnderTest.Actions1.Click("55;18");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Edit Claim Details') on item 'ApplicationUnderTest.EditClaimDetails1'.", repo.ApplicationUnderTest.EditClaimDetails1Info, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.EditClaimDetails1Info, "InnerText", "Edit Claim Details");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.EditClaimDetails1' at 30;10.", repo.ApplicationUnderTest.EditClaimDetails1Info, new RecordItemIndex(9));
            repo.ApplicationUnderTest.EditClaimDetails1.Click("30;10");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Begin' at 43;12.", repo.ApplicationUnderTest.BeginInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.Begin.Click("43;12");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 30s to exist. Associated repository item: 'ApplicationUnderTest.Edit_ClaimInformation_AccountType'", repo.ApplicationUnderTest.Edit_ClaimInformation_AccountTypeInfo, new ActionTimeout(30000), new RecordItemIndex(11));
            repo.ApplicationUnderTest.Edit_ClaimInformation_AccountTypeInfo.WaitForExists(30000);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText=$ClaimInformation_AccoutType) on item 'ApplicationUnderTest.Edit_ClaimInformation_AccountType'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AccountTypeInfo, new RecordItemIndex(12));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AccountTypeInfo, "InnerText", ClaimInformation_AccoutType, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(12)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText=$ClaimInformation_ClientName) on item 'ApplicationUnderTest.Edit_ClientName_ReadOnly'.", repo.ApplicationUnderTest.Edit_ClientName_ReadOnlyInfo, new RecordItemIndex(13));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClientName_ReadOnlyInfo, "InnerText", ClaimInformation_ClientName, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(13)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText=$ClaimInformation_ClaimNumber) on item 'ApplicationUnderTest.Edit_ClaimNumber_ReadOnly'.", repo.ApplicationUnderTest.Edit_ClaimNumber_ReadOnlyInfo, new RecordItemIndex(14));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimNumber_ReadOnlyInfo, "InnerText", ClaimInformation_ClaimNumber, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(14)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_ProjectName) on item 'ApplicationUnderTest.Edit_ClaimInformation_ProjectName'.", repo.ApplicationUnderTest.Edit_ClaimInformation_ProjectNameInfo, new RecordItemIndex(15));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_ProjectNameInfo, "TagValue", ClaimInformation_ProjectName, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(15)); }
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_ProjectName, new RecordItemIndex(16));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_ClaimType' and assigning its value to variable 'ClaimInformation_ClaimType'.", repo.ApplicationUnderTest.Edit_ClaimInformation_ClaimTypeInfo, new RecordItemIndex(17));
            ClaimInformation_ClaimType = repo.ApplicationUnderTest.Edit_ClaimInformation_ClaimType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_ClaimType, new RecordItemIndex(18));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_ClaimType) on item 'ApplicationUnderTest.Edit_ClaimInformation_ClaimType'.", repo.ApplicationUnderTest.Edit_ClaimInformation_ClaimTypeInfo, new RecordItemIndex(19));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_ClaimTypeInfo, "TagValue", ClaimInformation_ClaimType, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(19)); }
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Product' and assigning its value to variable 'ClaimInformation_Product'.", repo.ApplicationUnderTest.Edit_ClaimInformation_ProductInfo, new RecordItemIndex(20));
            ClaimInformation_Product = repo.ApplicationUnderTest.Edit_ClaimInformation_Product.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_Product, new RecordItemIndex(21));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (InnerText=$ClaimInformation_Product) on item 'ApplicationUnderTest.Edit_ClaimInformation_Product'.", repo.ApplicationUnderTest.Edit_ClaimInformation_ProductInfo, new RecordItemIndex(22));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_ProductInfo, "InnerText", ClaimInformation_Product, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(22)); }
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss' and assigning its value to variable 'claimInformation_DataOfLoss_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(23));
            claimInformation_DataOfLoss_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", claimInformation_DataOfLoss_getValue, new RecordItemIndex(24));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$claimInformation_DataOfLoss_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(25));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, "TagValue", claimInformation_DataOfLoss_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(25)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(26));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(27));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$Edit_ClaimInformation_DataOfLoss' on item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(28));
            repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss.Element.SetAttributeValue("TagValue", Edit_ClaimInformation_DataOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss' and assigning its value to variable 'ClaimInformation_AmountofLoss_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(29));
            ClaimInformation_AmountofLoss_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_AmountofLoss_getValue, new RecordItemIndex(30));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_AmountofLoss_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(31));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, "TagValue", ClaimInformation_AmountofLoss_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(31)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(32));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(33));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_ClaimInformation_AmountOfLoss' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(34));
            repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss.PressKeys(Edit_ClaimInformation_AmountOfLoss);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount' and assigning its value to variable 'ClaimInformation_DeductibleAmount_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(35));
            ClaimInformation_DeductibleAmount_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_DeductibleAmount_getValue, new RecordItemIndex(36));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_DeductibleAmount_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(37));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, "TagValue", ClaimInformation_DeductibleAmount_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(37)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(38));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(39));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Claim_Information_DeductibleAmount' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(40));
            repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount.PressKeys(Edit_Claim_Information_DeductibleAmount);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Street' and assigning its value to variable 'ClaimInformation_Street_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(41));
            ClaimInformation_Street_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_Street.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_Street_getValue, new RecordItemIndex(42));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_Street_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(43));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, "TagValue", ClaimInformation_Street_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(43)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(44));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_Street);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(45));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_Street);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(46));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_City);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(47));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_City);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(48));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(49));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_ClaimInformation_Street' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(50));
            repo.ApplicationUnderTest.Edit_ClaimInformation_Street.PressKeys(Edit_ClaimInformation_Street);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(51));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_City' and assigning its value to variable 'ClaimInformation_City_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(52));
            ClaimInformation_City_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_City.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_City_getValue, new RecordItemIndex(53));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ClaimInformation_City_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(54));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, "TagValue", ClaimInformation_City_getValue);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_ClaimInformation_City' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(55));
            repo.ApplicationUnderTest.Edit_ClaimInformation_City.PressKeys(Edit_ClaimInformation_City);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(56));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss' and assigning its value to variable 'ClaimInformation_StateOfLoss_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(57));
            ClaimInformation_StateOfLoss_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_StateOfLoss_getValue, new RecordItemIndex(58));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_StateOfLoss_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(59));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, "TagValue", ClaimInformation_StateOfLoss_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(59)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(60));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(61));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Claim_Information_StateOfLoss' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(62));
            repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss.PressKeys(Edit_Claim_Information_StateOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Tab' Press.", new RecordItemIndex(63));
            Keyboard.Press(System.Windows.Forms.Keys.Tab, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo' and assigning its value to variable 'ClaimInformation_PoliceReportNo_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(64));
            ClaimInformation_PoliceReportNo_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_PoliceReportNo_getValue, new RecordItemIndex(65));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_PoliceReportNo_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(66));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, "TagValue", ClaimInformation_PoliceReportNo_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(66)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_claimInformation_PoliceReportNo' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(67));
            repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo.PressKeys(Edit_claimInformation_PoliceReportNo);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability' and assigning its value to variable 'ClaimInformation_Afni_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(68));
            ClaimInformation_Afni_Liability = repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_Afni_Liability, new RecordItemIndex(69));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ClaimInformation_Afni_Liability) on item 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(70));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, "TagValue", ClaimInformation_Afni_Liability);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_Claim_Afni_Liability' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(71));
            repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability.PressKeys(Edit_Claim_Afni_Liability);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability' and assigning its value to variable 'ClaimInformation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(72));
            ClaimInformation_Client_Liability = repo.ApplicationUnderTest.Edit_ClaimInformation_Client_Liability.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_Client_Liability, new RecordItemIndex(73));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ClaimInformation_Client_Liability) on item 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(74));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, "TagValue", ClaimInformation_Client_Liability);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_ClaimInfomation_Client_Liability' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(75));
            repo.ApplicationUnderTest.Edit_ClaimInformation_Client_Liability.PressKeys(Edit_ClaimInfomation_Client_Liability);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type' and assigning its value to variable 'ClaimInformation_AccidentType_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(76));
            ClaimInformation_AccidentType_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_Type.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_AccidentType_getValue, new RecordItemIndex(77));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_AccidentType_getValue) on item 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(78));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, "TagValue", ClaimInformation_AccidentType_getValue, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(78)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(79));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_Type);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Delete' Press with focus on 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(80));
            Keyboard.PrepareFocus(repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_Type);
            Keyboard.Press(System.Windows.Forms.Keys.Delete, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_ClaimInfroamtion_AccidentType'.", new RecordItemIndex(81));
            Keyboard.Press(Edit_ClaimInfroamtion_AccidentType);
            Delay.Milliseconds(100);
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Checked='True') on item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(82));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, "Checked", "True", null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(82)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Value='true') on item 'ApplicationUnderTest.Edit_ClaimInformation_TotalLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_TotalLossInfo, new RecordItemIndex(83));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_TotalLossInfo, "Value", "true", null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(83)); }
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts' and assigning its value to variable 'ClaimInformation_IncidentFacts_getValue'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(84));
            ClaimInformation_IncidentFacts_getValue = repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ClaimInformation_IncidentFacts_getValue, new RecordItemIndex(85));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ClaimInformation_IncidentFacts) on item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(86));
                Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, "TagValue", ClaimInformation_IncidentFacts, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(86)); }
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$Edit_ClaimInformation_IncidentFacts' with focus on 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(87));
            repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts.PressKeys(Edit_ClaimInformation_IncidentFacts);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Edit_Save_Button' at 6;8.", repo.ApplicationUnderTest.Edit_Save_ButtonInfo, new RecordItemIndex(88));
            repo.ApplicationUnderTest.Edit_Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss' and assigning its value to variable 'Edit_ClaimInformation_DataOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(89));
            Edit_ClaimInformation_DataOfLoss = repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInformation_DataOfLoss) on item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(90));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, "TagValue", Edit_ClaimInformation_DataOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_DataOfLoss, new RecordItemIndex(91));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss' and assigning its value to variable 'Edit_ClaimInformation_DataOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(92));
            Edit_ClaimInformation_DataOfLoss = repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInformation_AmountOfLoss) on item 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(93));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, "TagValue", Edit_ClaimInformation_AmountOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_DataOfLoss, new RecordItemIndex(94));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount' and assigning its value to variable 'Edit_Claim_Information_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(95));
            Edit_Claim_Information_DeductibleAmount = repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_Claim_Information_DeductibleAmount) on item 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(96));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, "TagValue", Edit_Claim_Information_DeductibleAmount);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_Claim_Information_DeductibleAmount, new RecordItemIndex(97));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Street' and assigning its value to variable 'Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(98));
            Edit_ClaimInformation_Street = repo.ApplicationUnderTest.Edit_ClaimInformation_Street.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInformation_Street) on item 'ApplicationUnderTest.Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(99));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, "TagValue", Edit_ClaimInformation_Street);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_Street, new RecordItemIndex(100));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_City' and assigning its value to variable 'Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(101));
            Edit_ClaimInformation_City = repo.ApplicationUnderTest.Edit_ClaimInformation_City.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInformation_City) on item 'ApplicationUnderTest.Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(102));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, "TagValue", Edit_ClaimInformation_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_City, new RecordItemIndex(103));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss' and assigning its value to variable 'Edit_Claim_Information_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(104));
            Edit_Claim_Information_StateOfLoss = repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_Claim_Information_StateOfLoss) on item 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(105));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, "TagValue", Edit_Claim_Information_StateOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_Claim_Information_StateOfLoss, new RecordItemIndex(106));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo' and assigning its value to variable 'Edit_claimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(107));
            Edit_claimInformation_PoliceReportNo = repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_claimInformation_PoliceReportNo) on item 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(108));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, "TagValue", Edit_claimInformation_PoliceReportNo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_claimInformation_PoliceReportNo, new RecordItemIndex(109));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability' and assigning its value to variable 'Edit_Claim_Afni_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(110));
            Edit_Claim_Afni_Liability = repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_Claim_Afni_Liability) on item 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(111));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, "TagValue", Edit_Claim_Afni_Liability);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_Claim_Afni_Liability, new RecordItemIndex(112));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability' and assigning its value to variable 'Edit_ClaimInfomation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(113));
            Edit_ClaimInfomation_Client_Liability = repo.ApplicationUnderTest.Edit_ClaimInformation_Client_Liability.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInfomation_Client_Liability) on item 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(114));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, "TagValue", Edit_ClaimInfomation_Client_Liability);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInfomation_Client_Liability, new RecordItemIndex(115));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type' and assigning its value to variable 'Edit_ClaimInfroamtion_AccidentType'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(116));
            Edit_ClaimInfroamtion_AccidentType = repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_Type.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInfroamtion_AccidentType) on item 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(117));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, "TagValue", Edit_ClaimInfroamtion_AccidentType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInfroamtion_AccidentType, new RecordItemIndex(118));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts' and assigning its value to variable 'Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(119));
            Edit_ClaimInformation_IncidentFacts = repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$Edit_ClaimInformation_IncidentFacts) on item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(120));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, "TagValue", Edit_ClaimInformation_IncidentFacts);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_IncidentFacts, new RecordItemIndex(121));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 41;11.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(122));
            repo.ApplicationUnderTest.SubmitButton1.Click("41;11");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Edit_ClaimInfo_Footer' at 40;17.", repo.ApplicationUnderTest.Edit_ClaimInfo_FooterInfo, new RecordItemIndex(123));
            repo.ApplicationUnderTest.Edit_ClaimInfo_Footer.Click("40;17");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(124));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss' and assigning its value to variable 'Edit_ClaimInformation_DataOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(125));
            Edit_ClaimInformation_DataOfLoss = repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInformation_DataOfLoss) on item 'ApplicationUnderTest.Edit_ClaimInformation_DateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, new RecordItemIndex(126));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_DateOfLossInfo, "InnerText", Edit_ClaimInformation_DataOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_DataOfLoss, new RecordItemIndex(127));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss' and assigning its value to variable 'Edit_ClaimInformation_AmountOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(128));
            Edit_ClaimInformation_AmountOfLoss = repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInformation_AmountOfLoss) on item 'ApplicationUnderTest.Edit_ClaimInformation_AmountofLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, new RecordItemIndex(129));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AmountofLossInfo, "InnerText", Edit_ClaimInformation_AmountOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_AmountOfLoss, new RecordItemIndex(130));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss' and assigning its value to variable 'Edit_Claim_Information_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(131));
            Edit_Claim_Information_StateOfLoss = repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_Claim_Information_StateOfLoss) on item 'ApplicationUnderTest.Edit_ClaimInformation_StateOfLoss'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, new RecordItemIndex(132));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_StateOfLossInfo, "InnerText", Edit_Claim_Information_StateOfLoss);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_Claim_Information_StateOfLoss, new RecordItemIndex(133));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount' and assigning its value to variable 'Edit_Claim_Information_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(134));
            Edit_Claim_Information_DeductibleAmount = repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_Claim_Information_DeductibleAmount) on item 'ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmount'.", repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, new RecordItemIndex(135));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_DeductibleAmountInfo, "InnerText", Edit_Claim_Information_DeductibleAmount);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_Claim_Information_DeductibleAmount, new RecordItemIndex(136));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo' and assigning its value to variable 'Edit_claimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(137));
            Edit_claimInformation_PoliceReportNo = repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_claimInformation_PoliceReportNo) on item 'ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNo'.", repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, new RecordItemIndex(138));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_PoliceReportNoInfo, "InnerText", Edit_claimInformation_PoliceReportNo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_claimInformation_PoliceReportNo, new RecordItemIndex(139));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability' and assigning its value to variable 'Edit_Claim_Afni_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(140));
            Edit_Claim_Afni_Liability = repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_Claim_Afni_Liability) on item 'ApplicationUnderTest.Edit_ClaimInformation_AFNI_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, new RecordItemIndex(141));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_AFNI_LiabilityInfo, "InnerText", Edit_Claim_Afni_Liability);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_Claim_Afni_Liability, new RecordItemIndex(142));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability' and assigning its value to variable 'Edit_ClaimInfomation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(143));
            Edit_ClaimInfomation_Client_Liability = repo.ApplicationUnderTest.Edit_ClaimInformation_Client_Liability.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInfomation_Client_Liability) on item 'ApplicationUnderTest.Edit_ClaimInformation_Client_Liability'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, new RecordItemIndex(144));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_Client_LiabilityInfo, "InnerText", Edit_ClaimInfomation_Client_Liability);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInfomation_Client_Liability, new RecordItemIndex(145));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type' and assigning its value to variable 'Edit_ClaimInfroamtion_AccidentType'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(146));
            Edit_ClaimInfroamtion_AccidentType = repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_Type.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInfroamtion_AccidentType) on item 'ApplicationUnderTest.Edit_ClaimInformation_Accident_Type'.", repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, new RecordItemIndex(147));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_Accident_TypeInfo, "InnerText", Edit_ClaimInfroamtion_AccidentType);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInfroamtion_AccidentType, new RecordItemIndex(148));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_Street' and assigning its value to variable 'Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(149));
            Edit_ClaimInformation_Street = repo.ApplicationUnderTest.Edit_ClaimInformation_Street.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInformation_Street) on item 'ApplicationUnderTest.Edit_ClaimInformation_Street'.", repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, new RecordItemIndex(150));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_StreetInfo, "InnerText", Edit_ClaimInformation_Street);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_Street, new RecordItemIndex(151));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_City' and assigning its value to variable 'Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(152));
            Edit_ClaimInformation_City = repo.ApplicationUnderTest.Edit_ClaimInformation_City.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInformation_City) on item 'ApplicationUnderTest.Edit_ClaimInformation_City'.", repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, new RecordItemIndex(153));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_CityInfo, "InnerText", Edit_ClaimInformation_City);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_City, new RecordItemIndex(154));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts' and assigning its value to variable 'Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(155));
            Edit_ClaimInformation_IncidentFacts = repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts.Element.GetAttributeValueText("InnerText");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$Edit_ClaimInformation_IncidentFacts) on item 'ApplicationUnderTest.Edit_ClaimInformation_IncidentFacts'.", repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, new RecordItemIndex(156));
            Validate.AttributeEqual(repo.ApplicationUnderTest.Edit_ClaimInformation_IncidentFactsInfo, "InnerText", Edit_ClaimInformation_IncidentFacts);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", Edit_ClaimInformation_IncidentFacts, new RecordItemIndex(157));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
