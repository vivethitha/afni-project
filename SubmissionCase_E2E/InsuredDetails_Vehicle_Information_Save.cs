///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The InsuredDetails_Vehicle_Information_Save recording.
    /// </summary>
    [TestModule("6cb8bba2-64c3-4f8c-a2f5-e08883e58657", ModuleType.Recording, 1)]
    public partial class InsuredDetails_Vehicle_Information_Save : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static InsuredDetails_Vehicle_Information_Save instance = new InsuredDetails_Vehicle_Information_Save();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public InsuredDetails_Vehicle_Information_Save()
        {
            ID_VI_LicensePlate = "";
            ID_VI_LicensePlateState = "";
            ID_VD_Vin_Year = "";
            ID_VD_VIN_Make = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static InsuredDetails_Vehicle_Information_Save Instance
        {
            get { return instance; }
        }

#region Variables

        string _ID_VI_LicensePlate;

        /// <summary>
        /// Gets or sets the value of variable ID_VI_LicensePlate.
        /// </summary>
        [TestVariable("fb8e97f7-7b7c-4d2d-a53d-218b55528714")]
        public string ID_VI_LicensePlate
        {
            get { return _ID_VI_LicensePlate; }
            set { _ID_VI_LicensePlate = value; }
        }

        string _ID_VI_LicensePlateState;

        /// <summary>
        /// Gets or sets the value of variable ID_VI_LicensePlateState.
        /// </summary>
        [TestVariable("119f3373-9380-4e22-8361-387a2a1288e2")]
        public string ID_VI_LicensePlateState
        {
            get { return _ID_VI_LicensePlateState; }
            set { _ID_VI_LicensePlateState = value; }
        }

        string _ID_VD_Vin_Year;

        /// <summary>
        /// Gets or sets the value of variable ID_VD_Vin_Year.
        /// </summary>
        [TestVariable("ad2cabeb-b9d9-4a7a-af8d-dac1fbe7c2f0")]
        public string ID_VD_Vin_Year
        {
            get { return _ID_VD_Vin_Year; }
            set { _ID_VD_Vin_Year = value; }
        }

        string _ID_VD_VIN_Make;

        /// <summary>
        /// Gets or sets the value of variable ID_VD_VIN_Make.
        /// </summary>
        [TestVariable("dc835cbd-ee79-4120-97fd-08d83c73cebe")]
        public string ID_VD_VIN_Make
        {
            get { return _ID_VD_VIN_Make; }
            set { _ID_VD_VIN_Make = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.ID_VI_Header'", repo.ApplicationUnderTest.ID_VI_HeaderInfo, new ActionTimeout(10000), new RecordItemIndex(2));
            repo.ApplicationUnderTest.ID_VI_HeaderInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'ApplicationUnderTest.LabelTagNo2'.", repo.ApplicationUnderTest.LabelTagNo2Info, new RecordItemIndex(3));
            Validate.AttributeEqual(repo.ApplicationUnderTest.LabelTagNo2Info, "Enabled", "True");
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_VI_LicensePlate' and assigning its value to variable 'ID_VI_LicensePlate'.", repo.ApplicationUnderTest.ID_VI_LicensePlateInfo, new RecordItemIndex(4));
            ID_VI_LicensePlate = repo.ApplicationUnderTest.ID_VI_LicensePlate.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_VI_LicensePlate, new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_VI_LicensePlate) on item 'ApplicationUnderTest.ID_VI_LicensePlate'.", repo.ApplicationUnderTest.ID_VI_LicensePlateInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_VI_LicensePlateInfo, "TagValue", ID_VI_LicensePlate);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_VI_LicensePlateState' and assigning its value to variable 'ID_VI_LicensePlateState'.", repo.ApplicationUnderTest.ID_VI_LicensePlateStateInfo, new RecordItemIndex(7));
            ID_VI_LicensePlateState = repo.ApplicationUnderTest.ID_VI_LicensePlateState.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_VI_LicensePlateState, new RecordItemIndex(8));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_VI_LicensePlateState) on item 'ApplicationUnderTest.ID_VI_LicensePlateState'.", repo.ApplicationUnderTest.ID_VI_LicensePlateStateInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_VI_LicensePlateStateInfo, "TagValue", ID_VI_LicensePlateState);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_VD_Vin_Year' and assigning its value to variable 'ID_VD_Vin_Year'.", repo.ApplicationUnderTest.ID_VD_Vin_YearInfo, new RecordItemIndex(10));
            ID_VD_Vin_Year = repo.ApplicationUnderTest.ID_VD_Vin_Year.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_VD_Vin_Year, new RecordItemIndex(11));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_VD_Vin_Year) on item 'ApplicationUnderTest.ID_VD_Vin_Year'.", repo.ApplicationUnderTest.ID_VD_Vin_YearInfo, new RecordItemIndex(12));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_VD_Vin_YearInfo, "TagValue", ID_VD_Vin_Year);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_VD_VIN_Make' and assigning its value to variable 'ID_VD_VIN_Make'.", repo.ApplicationUnderTest.ID_VD_VIN_MakeInfo, new RecordItemIndex(13));
            ID_VD_VIN_Make = repo.ApplicationUnderTest.ID_VD_VIN_Make.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_VD_VIN_Make, new RecordItemIndex(14));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_VD_VIN_Make) on item 'ApplicationUnderTest.ID_VD_VIN_Make'.", repo.ApplicationUnderTest.ID_VD_VIN_MakeInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_VD_VIN_MakeInfo, "TagValue", ID_VD_VIN_Make);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(16));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Submit_5' at 40;14.", repo.ApplicationUnderTest.Submit_5Info, new RecordItemIndex(17));
            repo.ApplicationUnderTest.Submit_5.Click("40;14");
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
