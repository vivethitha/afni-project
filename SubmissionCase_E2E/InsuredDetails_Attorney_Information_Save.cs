///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The InsuredDetails_Attorney_Information_Save recording.
    /// </summary>
    [TestModule("20140c17-e5d8-40f7-bc37-760ff5b98b63", ModuleType.Recording, 1)]
    public partial class InsuredDetails_Attorney_Information_Save : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static InsuredDetails_Attorney_Information_Save instance = new InsuredDetails_Attorney_Information_Save();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public InsuredDetails_Attorney_Information_Save()
        {
            ID_AI_FirmName = "";
            ID_AI_FirstName = "";
            ID_AI_LastName = "";
            ID_AI_Address1 = "";
            ID_AI_Address2 = "";
            ID_AI_City = "";
            ID_AI_State = "";
            ID_AI_Zipcode = "";
            ID_AI_Email = "";
            ID_AI_UseType = "";
            ID_AI_PhoneType = "";
            ID_AI_Source = "";
            ID_AI_Phone = "";
            ID_AI_RepDate = "";
            ID_AI_EmailUseType = "";
            ID_AI_EmailSource = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static InsuredDetails_Attorney_Information_Save Instance
        {
            get { return instance; }
        }

#region Variables

        string _ID_AI_FirmName;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_FirmName.
        /// </summary>
        [TestVariable("0d02cd8e-d05e-458e-848c-16c9c3d69008")]
        public string ID_AI_FirmName
        {
            get { return _ID_AI_FirmName; }
            set { _ID_AI_FirmName = value; }
        }

        string _ID_AI_FirstName;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_FirstName.
        /// </summary>
        [TestVariable("3a670220-9dca-4ad6-9d28-eb875bfac5c7")]
        public string ID_AI_FirstName
        {
            get { return _ID_AI_FirstName; }
            set { _ID_AI_FirstName = value; }
        }

        string _ID_AI_LastName;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_LastName.
        /// </summary>
        [TestVariable("02a8a5cd-dcbb-42f3-9006-1599a6239183")]
        public string ID_AI_LastName
        {
            get { return _ID_AI_LastName; }
            set { _ID_AI_LastName = value; }
        }

        string _ID_AI_Address1;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_Address1.
        /// </summary>
        [TestVariable("997a579d-d643-45a7-bef2-f7c2ab683e68")]
        public string ID_AI_Address1
        {
            get { return _ID_AI_Address1; }
            set { _ID_AI_Address1 = value; }
        }

        string _ID_AI_Address2;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_Address2.
        /// </summary>
        [TestVariable("cf7dedc6-17f6-411c-8da4-5d5c2de06058")]
        public string ID_AI_Address2
        {
            get { return _ID_AI_Address2; }
            set { _ID_AI_Address2 = value; }
        }

        string _ID_AI_City;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_City.
        /// </summary>
        [TestVariable("da0165d7-9232-4e8a-aeae-5a12d445e162")]
        public string ID_AI_City
        {
            get { return _ID_AI_City; }
            set { _ID_AI_City = value; }
        }

        string _ID_AI_State;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_State.
        /// </summary>
        [TestVariable("ba618523-34ba-409b-8743-65d4c33fa533")]
        public string ID_AI_State
        {
            get { return _ID_AI_State; }
            set { _ID_AI_State = value; }
        }

        string _ID_AI_Zipcode;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_Zipcode.
        /// </summary>
        [TestVariable("d765357c-0140-4105-9ca9-80ddeebf8987")]
        public string ID_AI_Zipcode
        {
            get { return _ID_AI_Zipcode; }
            set { _ID_AI_Zipcode = value; }
        }

        string _ID_AI_Email;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_Email.
        /// </summary>
        [TestVariable("066da38e-5c1d-483c-9439-d3829d5e35bf")]
        public string ID_AI_Email
        {
            get { return _ID_AI_Email; }
            set { _ID_AI_Email = value; }
        }

        string _ID_AI_UseType;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_UseType.
        /// </summary>
        [TestVariable("d953cb68-1f8b-4913-9c1c-a1777aa6781e")]
        public string ID_AI_UseType
        {
            get { return _ID_AI_UseType; }
            set { _ID_AI_UseType = value; }
        }

        string _ID_AI_PhoneType;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_PhoneType.
        /// </summary>
        [TestVariable("4d9c9e04-5e77-4978-9d1c-bfe2ecc3fc83")]
        public string ID_AI_PhoneType
        {
            get { return _ID_AI_PhoneType; }
            set { _ID_AI_PhoneType = value; }
        }

        string _ID_AI_Source;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_Source.
        /// </summary>
        [TestVariable("8622f2bd-c2c6-4709-a921-13661cf7b218")]
        public string ID_AI_Source
        {
            get { return _ID_AI_Source; }
            set { _ID_AI_Source = value; }
        }

        string _ID_AI_Phone;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_Phone.
        /// </summary>
        [TestVariable("b8281a22-a8ab-4bc9-961f-23ad1656e0e1")]
        public string ID_AI_Phone
        {
            get { return _ID_AI_Phone; }
            set { _ID_AI_Phone = value; }
        }

        string _ID_AI_RepDate;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_RepDate.
        /// </summary>
        [TestVariable("6d2f08de-9138-44b8-8dcb-07339ea2172c")]
        public string ID_AI_RepDate
        {
            get { return _ID_AI_RepDate; }
            set { _ID_AI_RepDate = value; }
        }

        string _ID_AI_EmailUseType;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_EmailUseType.
        /// </summary>
        [TestVariable("2c46026a-4fb0-4f04-a5cb-85860ac22717")]
        public string ID_AI_EmailUseType
        {
            get { return _ID_AI_EmailUseType; }
            set { _ID_AI_EmailUseType = value; }
        }

        string _ID_AI_EmailSource;

        /// <summary>
        /// Gets or sets the value of variable ID_AI_EmailSource.
        /// </summary>
        [TestVariable("e383632f-f0a0-4f08-8f0e-d8814793074f")]
        public string ID_AI_EmailSource
        {
            get { return _ID_AI_EmailSource; }
            set { _ID_AI_EmailSource = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.Save_Button' at 6;8.", repo.ApplicationUnderTest.Save_ButtonInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.Save_Button.Click("6;8");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(1));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.ID_AI_FirmName'", repo.ApplicationUnderTest.ID_AI_FirmNameInfo, new ActionTimeout(10000), new RecordItemIndex(2));
            repo.ApplicationUnderTest.ID_AI_FirmNameInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_FirmName' and assigning its value to variable 'ID_AI_FirmName'.", repo.ApplicationUnderTest.ID_AI_FirmNameInfo, new RecordItemIndex(3));
            ID_AI_FirmName = repo.ApplicationUnderTest.ID_AI_FirmName.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_FirmName, new RecordItemIndex(4));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_FirmName) on item 'ApplicationUnderTest.ID_AI_FirmName'.", repo.ApplicationUnderTest.ID_AI_FirmNameInfo, new RecordItemIndex(5));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_FirmNameInfo, "TagValue", ID_AI_FirmName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_FirstName' and assigning its value to variable 'ID_AI_FirstName'.", repo.ApplicationUnderTest.ID_AI_FirstNameInfo, new RecordItemIndex(6));
            ID_AI_FirstName = repo.ApplicationUnderTest.ID_AI_FirstName.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_FirstName, new RecordItemIndex(7));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_FirstName) on item 'ApplicationUnderTest.ID_AI_FirstName'.", repo.ApplicationUnderTest.ID_AI_FirstNameInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_FirstNameInfo, "TagValue", ID_AI_FirstName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_LastName' and assigning its value to variable 'ID_AI_LastName'.", repo.ApplicationUnderTest.ID_AI_LastNameInfo, new RecordItemIndex(9));
            ID_AI_LastName = repo.ApplicationUnderTest.ID_AI_LastName.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_LastName, new RecordItemIndex(10));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_LastName) on item 'ApplicationUnderTest.ID_AI_LastName'.", repo.ApplicationUnderTest.ID_AI_LastNameInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_LastNameInfo, "TagValue", ID_AI_LastName);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_Address1' and assigning its value to variable 'ID_AI_Address1'.", repo.ApplicationUnderTest.ID_AI_Address1Info, new RecordItemIndex(12));
            ID_AI_Address1 = repo.ApplicationUnderTest.ID_AI_Address1.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_Address1, new RecordItemIndex(13));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_Address1) on item 'ApplicationUnderTest.ID_AI_Address1'.", repo.ApplicationUnderTest.ID_AI_Address1Info, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_Address1Info, "TagValue", ID_AI_Address1);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_Address2' and assigning its value to variable 'ID_AI_Address2'.", repo.ApplicationUnderTest.ID_AI_Address2Info, new RecordItemIndex(15));
            ID_AI_Address2 = repo.ApplicationUnderTest.ID_AI_Address2.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_Address2, new RecordItemIndex(16));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_Address2) on item 'ApplicationUnderTest.ID_AI_Address2'.", repo.ApplicationUnderTest.ID_AI_Address2Info, new RecordItemIndex(17));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_Address2Info, "TagValue", ID_AI_Address2);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_City' and assigning its value to variable 'ID_AI_City'.", repo.ApplicationUnderTest.ID_AI_CityInfo, new RecordItemIndex(18));
            ID_AI_City = repo.ApplicationUnderTest.ID_AI_City.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_City, new RecordItemIndex(19));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_City) on item 'ApplicationUnderTest.ID_AI_City'.", repo.ApplicationUnderTest.ID_AI_CityInfo, new RecordItemIndex(20));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_CityInfo, "TagValue", ID_AI_City);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_State' and assigning its value to variable 'ID_AI_State'.", repo.ApplicationUnderTest.ID_AI_StateInfo, new RecordItemIndex(21));
            ID_AI_State = repo.ApplicationUnderTest.ID_AI_State.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_State, new RecordItemIndex(22));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_State) on item 'ApplicationUnderTest.ID_AI_State'.", repo.ApplicationUnderTest.ID_AI_StateInfo, new RecordItemIndex(23));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_StateInfo, "TagValue", ID_AI_State);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_Zipcode' and assigning its value to variable 'ID_AI_Zipcode'.", repo.ApplicationUnderTest.ID_AI_ZipcodeInfo, new RecordItemIndex(24));
            ID_AI_Zipcode = repo.ApplicationUnderTest.ID_AI_Zipcode.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_Zipcode, new RecordItemIndex(25));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_Zipcode) on item 'ApplicationUnderTest.ID_AI_Zipcode'.", repo.ApplicationUnderTest.ID_AI_ZipcodeInfo, new RecordItemIndex(26));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_ZipcodeInfo, "TagValue", ID_AI_Zipcode);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(27));
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_RepresentationDate' and assigning its value to variable 'ID_AI_RepDate'.", repo.ApplicationUnderTest.ID_AI_RepresentationDateInfo, new RecordItemIndex(28));
            ID_AI_RepDate = repo.ApplicationUnderTest.ID_AI_RepresentationDate.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_RepDate, new RecordItemIndex(29));
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (TagValue=$ID_AI_RepDate) on item 'ApplicationUnderTest.ID_AI_RepresentationDate'.", repo.ApplicationUnderTest.ID_AI_RepresentationDateInfo, new RecordItemIndex(30));
                Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_RepresentationDateInfo, "TagValue", ID_AI_RepDate, null, false);
                Delay.Milliseconds(100);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(30)); }
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_UseType' and assigning its value to variable 'ID_AI_UseType'.", repo.ApplicationUnderTest.ID_AI_UseTypeInfo, new RecordItemIndex(31));
            ID_AI_UseType = repo.ApplicationUnderTest.ID_AI_UseType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_UseType, new RecordItemIndex(32));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_UseType) on item 'ApplicationUnderTest.ID_AI_UseType'.", repo.ApplicationUnderTest.ID_AI_UseTypeInfo, new RecordItemIndex(33));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_UseTypeInfo, "TagValue", ID_AI_UseType);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_PhoneType' and assigning its value to variable 'ID_AI_PhoneType'.", repo.ApplicationUnderTest.ID_AI_PhoneTypeInfo, new RecordItemIndex(34));
            ID_AI_PhoneType = repo.ApplicationUnderTest.ID_AI_PhoneType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_PhoneType, new RecordItemIndex(35));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_PhoneType) on item 'ApplicationUnderTest.ID_AI_PhoneType'.", repo.ApplicationUnderTest.ID_AI_PhoneTypeInfo, new RecordItemIndex(36));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_PhoneTypeInfo, "TagValue", ID_AI_PhoneType);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_Source' and assigning its value to variable 'ID_AI_Source'.", repo.ApplicationUnderTest.ID_AI_SourceInfo, new RecordItemIndex(37));
            ID_AI_Source = repo.ApplicationUnderTest.ID_AI_Source.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_Source, new RecordItemIndex(38));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_Source) on item 'ApplicationUnderTest.ID_AI_Source'.", repo.ApplicationUnderTest.ID_AI_SourceInfo, new RecordItemIndex(39));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_SourceInfo, "TagValue", ID_AI_Source);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_Phone' and assigning its value to variable 'ID_AI_Phone'.", repo.ApplicationUnderTest.ID_AI_PhoneInfo, new RecordItemIndex(40));
            ID_AI_Phone = repo.ApplicationUnderTest.ID_AI_Phone.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_Phone, new RecordItemIndex(41));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_Phone) on item 'ApplicationUnderTest.ID_AI_Phone'.", repo.ApplicationUnderTest.ID_AI_PhoneInfo, new RecordItemIndex(42));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_PhoneInfo, "TagValue", ID_AI_Phone);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_EmailUseType' and assigning its value to variable 'ID_AI_EmailUseType'.", repo.ApplicationUnderTest.ID_AI_EmailUseTypeInfo, new RecordItemIndex(43));
            ID_AI_EmailUseType = repo.ApplicationUnderTest.ID_AI_EmailUseType.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_EmailUseType, new RecordItemIndex(44));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_EmailUseType) on item 'ApplicationUnderTest.ID_AI_EmailUseType'.", repo.ApplicationUnderTest.ID_AI_EmailUseTypeInfo, new RecordItemIndex(45));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_EmailUseTypeInfo, "TagValue", ID_AI_EmailUseType);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'TagValue' from item 'ApplicationUnderTest.ID_AI_EmailSource' and assigning its value to variable 'ID_AI_EmailSource'.", repo.ApplicationUnderTest.ID_AI_EmailSourceInfo, new RecordItemIndex(46));
            ID_AI_EmailSource = repo.ApplicationUnderTest.ID_AI_EmailSource.Element.GetAttributeValueText("TagValue");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "User", ID_AI_EmailSource, new RecordItemIndex(47));
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$ID_AI_EmailSource) on item 'ApplicationUnderTest.ID_AI_EmailSource'.", repo.ApplicationUnderTest.ID_AI_EmailSourceInfo, new RecordItemIndex(48));
            Validate.AttributeEqual(repo.ApplicationUnderTest.ID_AI_EmailSourceInfo, "TagValue", ID_AI_EmailSource);
            Delay.Milliseconds(100);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(49));
            
            try {
                Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nKey sequence '{Tab}'.", new RecordItemIndex(50));
                Keyboard.Press("{Tab}");
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(50)); }
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.SubmitButton1' at 46;15.", repo.ApplicationUnderTest.SubmitButton1Info, new RecordItemIndex(51));
            repo.ApplicationUnderTest.SubmitButton1.Click("46;15");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
