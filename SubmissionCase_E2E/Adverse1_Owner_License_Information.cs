///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SubmissionCase_E2E
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Adverse1_Owner_License_Information recording.
    /// </summary>
    [TestModule("c179ed09-8eab-4171-83cb-1bf708171bd5", ModuleType.Recording, 1)]
    public partial class Adverse1_Owner_License_Information : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SubmissionCase_E2ERepository repository.
        /// </summary>
        public static SubmissionCase_E2ERepository repo = SubmissionCase_E2ERepository.Instance;

        static Adverse1_Owner_License_Information instance = new Adverse1_Owner_License_Information();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Adverse1_Owner_License_Information()
        {
            AO_LI_SSN = "";
            AO_LI_DateOfBirth = "";
            AO_LI_LicenseNumber = "";
            AO_LI_LicenseState = "";
            AO_LI_RevocationDate = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Adverse1_Owner_License_Information Instance
        {
            get { return instance; }
        }

#region Variables

        string _AO_LI_SSN;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_SSN.
        /// </summary>
        [TestVariable("8e106acf-b4af-4870-bd6c-1dda73ab77cc")]
        public string AO_LI_SSN
        {
            get { return _AO_LI_SSN; }
            set { _AO_LI_SSN = value; }
        }

        string _AO_LI_DateOfBirth;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_DateOfBirth.
        /// </summary>
        [TestVariable("da068791-c3ec-464b-bbda-79b70e1acf3c")]
        public string AO_LI_DateOfBirth
        {
            get { return _AO_LI_DateOfBirth; }
            set { _AO_LI_DateOfBirth = value; }
        }

        string _AO_LI_LicenseNumber;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_LicenseNumber.
        /// </summary>
        [TestVariable("98dd765d-02ca-4ed0-b244-bef08639a85c")]
        public string AO_LI_LicenseNumber
        {
            get { return _AO_LI_LicenseNumber; }
            set { _AO_LI_LicenseNumber = value; }
        }

        string _AO_LI_LicenseState;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_LicenseState.
        /// </summary>
        [TestVariable("d12600e9-74b0-41b0-9da6-7b731281858b")]
        public string AO_LI_LicenseState
        {
            get { return _AO_LI_LicenseState; }
            set { _AO_LI_LicenseState = value; }
        }

        string _AO_LI_RevocationDate;

        /// <summary>
        /// Gets or sets the value of variable AO_LI_RevocationDate.
        /// </summary>
        [TestVariable("87e27526-2bb3-40c9-87fc-4b2d31add0b8")]
        public string AO_LI_RevocationDate
        {
            get { return _AO_LI_RevocationDate; }
            set { _AO_LI_RevocationDate = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ApplicationUnderTest.Adverse_Owner_License_Header'", repo.ApplicationUnderTest.Adverse_Owner_License_HeaderInfo, new ActionTimeout(10000), new RecordItemIndex(0));
            repo.ApplicationUnderTest.Adverse_Owner_License_HeaderInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AO_LI_SSN' with focus on 'ApplicationUnderTest.AO_LI_SSN'.", repo.ApplicationUnderTest.AO_LI_SSNInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.AO_LI_SSN.PressKeys(AO_LI_SSN);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(2));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AO_LI_DateOfBirth' with focus on 'ApplicationUnderTest.AO_LI_DateOfBirth'.", repo.ApplicationUnderTest.AO_LI_DateOfBirthInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.AO_LI_DateOfBirth.PressKeys(AO_LI_DateOfBirth);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(4));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'O_Employment Place' with focus on 'ApplicationUnderTest.AO_LI_EmploymentPlace'.", repo.ApplicationUnderTest.AO_LI_EmploymentPlaceInfo, new RecordItemIndex(5));
            //repo.ApplicationUnderTest.AO_LI_EmploymentPlace.PressKeys("O_Employment Place");
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AO_LI_LicenseNumber' with focus on 'ApplicationUnderTest.AO_LI_LicenseNumber'.", repo.ApplicationUnderTest.AO_LI_LicenseNumberInfo, new RecordItemIndex(6));
            repo.ApplicationUnderTest.AO_LI_LicenseNumber.PressKeys(AO_LI_LicenseNumber);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AO_LI_LicenseState' with focus on 'ApplicationUnderTest.AO_LI_LicenseState'.", repo.ApplicationUnderTest.AO_LI_LicenseStateInfo, new RecordItemIndex(7));
            repo.ApplicationUnderTest.AO_LI_LicenseState.PressKeys(AO_LI_LicenseState);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute TagValue to '$AO_LI_RevocationDate' on item 'ApplicationUnderTest.AO_LI_RevocationDate'.", repo.ApplicationUnderTest.AO_LI_RevocationDateInfo, new RecordItemIndex(8));
            repo.ApplicationUnderTest.AO_LI_RevocationDate.Element.SetAttributeValue("TagValue", AO_LI_RevocationDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Tab}'.", new RecordItemIndex(9));
            Keyboard.Press("{Tab}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.AO_LI_Revoked' at 6;4.", repo.ApplicationUnderTest.AO_LI_RevokedInfo, new RecordItemIndex(10));
            repo.ApplicationUnderTest.AO_LI_Revoked.Click("6;4");
            Delay.Milliseconds(200);
            
            //Report.Log(ReportLevel.Info, "Keyboard", "Key sequence ' '.", new RecordItemIndex(11));
            //Keyboard.Press(" ");
            //Delay.Milliseconds(0);
            
            //Report.Screenshot(ReportLevel.Info, "User", "", repo.PegaCaseManagerPortalGoogleChrome.Screenshot_Window, false, new RecordItemIndex(12));
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
